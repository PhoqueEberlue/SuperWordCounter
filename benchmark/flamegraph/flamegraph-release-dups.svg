<?xml version="1.0" standalone="no"?><!DOCTYPE svg PUBLIC "-//W3C//DTD SVG 1.1//EN" "http://www.w3.org/Graphics/SVG/1.1/DTD/svg11.dtd"><svg version="1.1" width="1200" height="838" onload="init(evt)" viewBox="0 0 1200 838" xmlns="http://www.w3.org/2000/svg" xmlns:xlink="http://www.w3.org/1999/xlink" xmlns:fg="http://github.com/jonhoo/inferno"><!--Flame graph stack visualization. See https://github.com/brendangregg/FlameGraph for latest version, and http://www.brendangregg.com/flamegraphs.html for examples.--><!--NOTES: --><defs><linearGradient id="background" y1="0" y2="1" x1="0" x2="0"><stop stop-color="#eeeeee" offset="5%"/><stop stop-color="#eeeeb0" offset="95%"/></linearGradient></defs><style type="text/css">
text { font-family:monospace; font-size:12px }
#title { text-anchor:middle; font-size:17px; }
#matched { text-anchor:end; }
#search { text-anchor:end; opacity:0.1; cursor:pointer; }
#search:hover, #search.show { opacity:1; }
#subtitle { text-anchor:middle; font-color:rgb(160,160,160); }
#unzoom { cursor:pointer; }
#frames > *:hover { stroke:black; stroke-width:0.5; cursor:pointer; }
.hide { display:none; }
.parent { opacity:0.5; }
</style><script type="text/ecmascript"><![CDATA[
        var nametype = 'Function:';
        var fontsize = 12;
        var fontwidth = 0.59;
        var xpad = 10;
        var inverted = false;
        var searchcolor = 'rgb(230,0,230)';
        var fluiddrawing = true;
        var truncate_text_right = false;
    ]]><![CDATA["use strict";
var details, searchbtn, unzoombtn, matchedtxt, svg, searching, frames, known_font_width;
function init(evt) {
    details = document.getElementById("details").firstChild;
    searchbtn = document.getElementById("search");
    unzoombtn = document.getElementById("unzoom");
    matchedtxt = document.getElementById("matched");
    svg = document.getElementsByTagName("svg")[0];
    frames = document.getElementById("frames");
    known_font_width = get_monospace_width(frames);
    total_samples = parseInt(frames.attributes.total_samples.value);
    searching = 0;

    // Use GET parameters to restore a flamegraph's state.
    var restore_state = function() {
        var params = get_params();
        if (params.x && params.y)
            zoom(find_group(document.querySelector('[*|x="' + params.x + '"][y="' + params.y + '"]')));
        if (params.s)
            search(params.s);
    };

    if (fluiddrawing) {
        // Make width dynamic so the SVG fits its parent's width.
        svg.removeAttribute("width");
        // Edge requires us to have a viewBox that gets updated with size changes.
        var isEdge = /Edge\/\d./i.test(navigator.userAgent);
        if (!isEdge) {
            svg.removeAttribute("viewBox");
        }
        var update_for_width_change = function() {
            if (isEdge) {
                svg.attributes.viewBox.value = "0 0 " + svg.width.baseVal.value + " " + svg.height.baseVal.value;
            }

            // Keep consistent padding on left and right of frames container.
            frames.attributes.width.value = svg.width.baseVal.value - xpad * 2;

            // Text truncation needs to be adjusted for the current width.
            update_text_for_elements(frames.children);

            // Keep search elements at a fixed distance from right edge.
            var svgWidth = svg.width.baseVal.value;
            searchbtn.attributes.x.value = svgWidth - xpad;
            matchedtxt.attributes.x.value = svgWidth - xpad;
        };
        window.addEventListener('resize', function() {
            update_for_width_change();
        });
        // This needs to be done asynchronously for Safari to work.
        setTimeout(function() {
            unzoom();
            update_for_width_change();
            restore_state();
        }, 0);
    } else {
        restore_state();
    }
}
// event listeners
window.addEventListener("click", function(e) {
    var target = find_group(e.target);
    if (target) {
        if (target.nodeName == "a") {
            if (e.ctrlKey === false) return;
            e.preventDefault();
        }
        if (target.classList.contains("parent")) unzoom();
        zoom(target);

        // set parameters for zoom state
        var el = target.querySelector("rect");
        if (el && el.attributes && el.attributes.y && el.attributes["fg:x"]) {
            var params = get_params()
            params.x = el.attributes["fg:x"].value;
            params.y = el.attributes.y.value;
            history.replaceState(null, null, parse_params(params));
        }
    }
    else if (e.target.id == "unzoom") {
        unzoom();

        // remove zoom state
        var params = get_params();
        if (params.x) delete params.x;
        if (params.y) delete params.y;
        history.replaceState(null, null, parse_params(params));
    }
    else if (e.target.id == "search") search_prompt();
}, false)
// mouse-over for info
// show
window.addEventListener("mouseover", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = nametype + " " + g_to_text(target);
}, false)
// clear
window.addEventListener("mouseout", function(e) {
    var target = find_group(e.target);
    if (target) details.nodeValue = ' ';
}, false)
// ctrl-F for search
window.addEventListener("keydown",function (e) {
    if (e.keyCode === 114 || (e.ctrlKey && e.keyCode === 70)) {
        e.preventDefault();
        search_prompt();
    }
}, false)
// functions
function get_params() {
    var params = {};
    var paramsarr = window.location.search.substr(1).split('&');
    for (var i = 0; i < paramsarr.length; ++i) {
        var tmp = paramsarr[i].split("=");
        if (!tmp[0] || !tmp[1]) continue;
        params[tmp[0]]  = decodeURIComponent(tmp[1]);
    }
    return params;
}
function parse_params(params) {
    var uri = "?";
    for (var key in params) {
        uri += key + '=' + encodeURIComponent(params[key]) + '&';
    }
    if (uri.slice(-1) == "&")
        uri = uri.substring(0, uri.length - 1);
    if (uri == '?')
        uri = window.location.href.split('?')[0];
    return uri;
}
function find_child(node, selector) {
    var children = node.querySelectorAll(selector);
    if (children.length) return children[0];
    return;
}
function find_group(node) {
    var parent = node.parentElement;
    if (!parent) return;
    if (parent.id == "frames") return node;
    return find_group(parent);
}
function orig_save(e, attr, val) {
    if (e.attributes["fg:orig_" + attr] != undefined) return;
    if (e.attributes[attr] == undefined) return;
    if (val == undefined) val = e.attributes[attr].value;
    e.setAttribute("fg:orig_" + attr, val);
}
function orig_load(e, attr) {
    if (e.attributes["fg:orig_"+attr] == undefined) return;
    e.attributes[attr].value = e.attributes["fg:orig_" + attr].value;
    e.removeAttribute("fg:orig_" + attr);
}
function g_to_text(e) {
    var text = find_child(e, "title").firstChild.nodeValue;
    return (text)
}
function g_to_func(e) {
    var func = g_to_text(e);
    // if there's any manipulation we want to do to the function
    // name before it's searched, do it here before returning.
    return (func);
}
function get_monospace_width(frames) {
    // Given the id="frames" element, return the width of text characters if
    // this is a monospace font, otherwise return 0.
    text = find_child(frames.children[0], "text");
    originalContent = text.textContent;
    text.textContent = "!";
    bangWidth = text.getComputedTextLength();
    text.textContent = "W";
    wWidth = text.getComputedTextLength();
    text.textContent = originalContent;
    if (bangWidth === wWidth) {
        return bangWidth;
    } else {
        return 0;
    }
}
function update_text_for_elements(elements) {
    // In order to render quickly in the browser, you want to do one pass of
    // reading attributes, and one pass of mutating attributes. See
    // https://web.dev/avoid-large-complex-layouts-and-layout-thrashing/ for details.

    // Fall back to inefficient calculation, if we're variable-width font.
    // TODO This should be optimized somehow too.
    if (known_font_width === 0) {
        for (var i = 0; i < elements.length; i++) {
            update_text(elements[i]);
        }
        return;
    }

    var textElemNewAttributes = [];
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var r = find_child(e, "rect");
        var t = find_child(e, "text");
        var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
        var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
        var newX = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

        // Smaller than this size won't fit anything
        if (w < 2 * known_font_width) {
            textElemNewAttributes.push([newX, ""]);
            continue;
        }

        // Fit in full text width
        if (txt.length * known_font_width < w) {
            textElemNewAttributes.push([newX, txt]);
            continue;
        }

        var substringLength = Math.floor(w / known_font_width) - 2;
        if (truncate_text_right) {
            // Truncate the right side of the text.
            textElemNewAttributes.push([newX, txt.substring(0, substringLength) + ".."]);
            continue;
        } else {
            // Truncate the left side of the text.
            textElemNewAttributes.push([newX, ".." + txt.substring(txt.length - substringLength, txt.length)]);
            continue;
        }
    }

    console.assert(textElemNewAttributes.length === elements.length, "Resize failed, please file a bug at https://github.com/jonhoo/inferno/");

    // Now that we know new textContent, set it all in one go so we don't refresh a bazillion times.
    for (var i = 0; i < elements.length; i++) {
        var e = elements[i];
        var values = textElemNewAttributes[i];
        var t = find_child(e, "text");
        t.attributes.x.value = values[0];
        t.textContent = values[1];
    }
}

function update_text(e) {
    var r = find_child(e, "rect");
    var t = find_child(e, "text");
    var w = parseFloat(r.attributes.width.value) * frames.attributes.width.value / 100 - 3;
    var txt = find_child(e, "title").textContent.replace(/\([^(]*\)$/,"");
    t.attributes.x.value = format_percent((parseFloat(r.attributes.x.value) + (100 * 3 / frames.attributes.width.value)));

    // Smaller than this size won't fit anything
    if (w < 2 * fontsize * fontwidth) {
        t.textContent = "";
        return;
    }
    t.textContent = txt;
    // Fit in full text width
    if (t.getComputedTextLength() < w)
        return;
    if (truncate_text_right) {
        // Truncate the right side of the text.
        for (var x = txt.length - 2; x > 0; x--) {
            if (t.getSubStringLength(0, x + 2) <= w) {
                t.textContent = txt.substring(0, x) + "..";
                return;
            }
        }
    } else {
        // Truncate the left side of the text.
        for (var x = 2; x < txt.length; x++) {
            if (t.getSubStringLength(x - 2, txt.length) <= w) {
                t.textContent = ".." + txt.substring(x, txt.length);
                return;
            }
        }
    }
    t.textContent = "";
}
// zoom
function zoom_reset(e) {
    if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * parseInt(e.attributes["fg:x"].value) / total_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / total_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_reset(c[i]);
    }
}
function zoom_child(e, x, zoomed_width_samples) {
    if (e.tagName == "text") {
        var parent_x = parseFloat(find_child(e.parentNode, "rect[x]").attributes.x.value);
        e.attributes.x.value = format_percent(parent_x + (100 * 3 / frames.attributes.width.value));
    } else if (e.tagName == "rect") {
        e.attributes.x.value = format_percent(100 * (parseInt(e.attributes["fg:x"].value) - x) / zoomed_width_samples);
        e.attributes.width.value = format_percent(100 * parseInt(e.attributes["fg:w"].value) / zoomed_width_samples);
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_child(c[i], x, zoomed_width_samples);
    }
}
function zoom_parent(e) {
    if (e.attributes) {
        if (e.attributes.x != undefined) {
            e.attributes.x.value = "0.0%";
        }
        if (e.attributes.width != undefined) {
            e.attributes.width.value = "100.0%";
        }
    }
    if (e.childNodes == undefined) return;
    for(var i = 0, c = e.childNodes; i < c.length; i++) {
        zoom_parent(c[i]);
    }
}
function zoom(node) {
    var attr = find_child(node, "rect").attributes;
    var width = parseInt(attr["fg:w"].value);
    var xmin = parseInt(attr["fg:x"].value);
    var xmax = xmin + width;
    var ymin = parseFloat(attr.y.value);
    unzoombtn.classList.remove("hide");
    var el = frames.children;
    var to_update_text = [];
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        var a = find_child(e, "rect").attributes;
        var ex = parseInt(a["fg:x"].value);
        var ew = parseInt(a["fg:w"].value);
        // Is it an ancestor
        if (!inverted) {
            var upstack = parseFloat(a.y.value) > ymin;
        } else {
            var upstack = parseFloat(a.y.value) < ymin;
        }
        if (upstack) {
            // Direct ancestor
            if (ex <= xmin && (ex+ew) >= xmax) {
                e.classList.add("parent");
                zoom_parent(e);
                to_update_text.push(e);
            }
            // not in current path
            else
                e.classList.add("hide");
        }
        // Children maybe
        else {
            // no common path
            if (ex < xmin || ex >= xmax) {
                e.classList.add("hide");
            }
            else {
                zoom_child(e, xmin, width);
                to_update_text.push(e);
            }
        }
    }
    update_text_for_elements(to_update_text);
}
function unzoom() {
    unzoombtn.classList.add("hide");
    var el = frames.children;
    for(var i = 0; i < el.length; i++) {
        el[i].classList.remove("parent");
        el[i].classList.remove("hide");
        zoom_reset(el[i]);
    }
    update_text_for_elements(el);
}
// search
function reset_search() {
    var el = document.querySelectorAll("#frames rect");
    for (var i = 0; i < el.length; i++) {
        orig_load(el[i], "fill")
    }
    var params = get_params();
    delete params.s;
    history.replaceState(null, null, parse_params(params));
}
function search_prompt() {
    if (!searching) {
        var term = prompt("Enter a search term (regexp " +
            "allowed, eg: ^ext4_)", "");
        if (term != null) {
            search(term)
        }
    } else {
        reset_search();
        searching = 0;
        searchbtn.classList.remove("show");
        searchbtn.firstChild.nodeValue = "Search"
        matchedtxt.classList.add("hide");
        matchedtxt.firstChild.nodeValue = ""
    }
}
function search(term) {
    var re = new RegExp(term);
    var el = frames.children;
    var matches = new Object();
    var maxwidth = 0;
    for (var i = 0; i < el.length; i++) {
        var e = el[i];
        // Skip over frames which are either not visible, or below the zoomed-to frame
        if (e.classList.contains("hide") || e.classList.contains("parent")) {
            continue;
        }
        var func = g_to_func(e);
        var rect = find_child(e, "rect");
        if (func == null || rect == null)
            continue;
        // Save max width. Only works as we have a root frame
        var w = parseInt(rect.attributes["fg:w"].value);
        if (w > maxwidth)
            maxwidth = w;
        if (func.match(re)) {
            // highlight
            var x = parseInt(rect.attributes["fg:x"].value);
            orig_save(rect, "fill");
            rect.attributes.fill.value = searchcolor;
            // remember matches
            if (matches[x] == undefined) {
                matches[x] = w;
            } else {
                if (w > matches[x]) {
                    // overwrite with parent
                    matches[x] = w;
                }
            }
            searching = 1;
        }
    }
    if (!searching)
        return;
    var params = get_params();
    params.s = term;
    history.replaceState(null, null, parse_params(params));

    searchbtn.classList.add("show");
    searchbtn.firstChild.nodeValue = "Reset Search";
    // calculate percent matched, excluding vertical overlap
    var count = 0;
    var lastx = -1;
    var lastw = 0;
    var keys = Array();
    for (k in matches) {
        if (matches.hasOwnProperty(k))
            keys.push(k);
    }
    // sort the matched frames by their x location
    // ascending, then width descending
    keys.sort(function(a, b){
        return a - b;
    });
    // Step through frames saving only the biggest bottom-up frames
    // thanks to the sort order. This relies on the tree property
    // where children are always smaller than their parents.
    for (var k in keys) {
        var x = parseInt(keys[k]);
        var w = matches[keys[k]];
        if (x >= lastx + lastw) {
            count += w;
            lastx = x;
            lastw = w;
        }
    }
    // display matched percent
    matchedtxt.classList.remove("hide");
    var pct = 100 * count / maxwidth;
    if (pct != 100) pct = pct.toFixed(1);
    matchedtxt.firstChild.nodeValue = "Matched: " + pct + "%";
}
function format_percent(n) {
    return n.toFixed(4) + "%";
}
]]></script><rect x="0" y="0" width="100%" height="838" fill="url(#background)"/><text id="title" fill="rgb(0,0,0)" x="50.0000%" y="24.00">Flame Graph</text><text id="details" fill="rgb(0,0,0)" x="10" y="821.00"> </text><text id="unzoom" class="hide" fill="rgb(0,0,0)" x="10" y="24.00">Reset Zoom</text><text id="search" fill="rgb(0,0,0)" x="1190" y="24.00">Search</text><text id="matched" fill="rgb(0,0,0)" x="1190" y="821.00"> </text><svg id="frames" x="10" width="1180" total_samples="1068"><g><title>perf-exec (5 samples, 0.47%)</title><rect x="0.0000%" y="773" width="0.4682%" height="15" fill="rgb(227,0,7)" fg:x="0" fg:w="5"/><text x="0.2500%" y="783.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.47%)</title><rect x="0.0000%" y="757" width="0.4682%" height="15" fill="rgb(217,0,24)" fg:x="0" fg:w="5"/><text x="0.2500%" y="767.50"></text></g><g><title>do_syscall_64 (5 samples, 0.47%)</title><rect x="0.0000%" y="741" width="0.4682%" height="15" fill="rgb(221,193,54)" fg:x="0" fg:w="5"/><text x="0.2500%" y="751.50"></text></g><g><title>__x64_sys_execve (5 samples, 0.47%)</title><rect x="0.0000%" y="725" width="0.4682%" height="15" fill="rgb(248,212,6)" fg:x="0" fg:w="5"/><text x="0.2500%" y="735.50"></text></g><g><title>do_execveat_common.isra.0 (5 samples, 0.47%)</title><rect x="0.0000%" y="709" width="0.4682%" height="15" fill="rgb(208,68,35)" fg:x="0" fg:w="5"/><text x="0.2500%" y="719.50"></text></g><g><title>bprm_execve (5 samples, 0.47%)</title><rect x="0.0000%" y="693" width="0.4682%" height="15" fill="rgb(232,128,0)" fg:x="0" fg:w="5"/><text x="0.2500%" y="703.50"></text></g><g><title>load_elf_binary (5 samples, 0.47%)</title><rect x="0.0000%" y="677" width="0.4682%" height="15" fill="rgb(207,160,47)" fg:x="0" fg:w="5"/><text x="0.2500%" y="687.50"></text></g><g><title>begin_new_exec (5 samples, 0.47%)</title><rect x="0.0000%" y="661" width="0.4682%" height="15" fill="rgb(228,23,34)" fg:x="0" fg:w="5"/><text x="0.2500%" y="671.50"></text></g><g><title>perf_event_exec (5 samples, 0.47%)</title><rect x="0.0000%" y="645" width="0.4682%" height="15" fill="rgb(218,30,26)" fg:x="0" fg:w="5"/><text x="0.2500%" y="655.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.47%)</title><rect x="0.0000%" y="629" width="0.4682%" height="15" fill="rgb(220,122,19)" fg:x="0" fg:w="5"/><text x="0.2500%" y="639.50"></text></g><g><title>native_write_msr (5 samples, 0.47%)</title><rect x="0.0000%" y="613" width="0.4682%" height="15" fill="rgb(250,228,42)" fg:x="0" fg:w="5"/><text x="0.2500%" y="623.50"></text></g><g><title>[libc.so.6] (35 samples, 3.28%)</title><rect x="0.4682%" y="741" width="3.2772%" height="15" fill="rgb(240,193,28)" fg:x="5" fg:w="35"/><text x="0.7182%" y="751.50">[li..</text></g><g><title>ret_from_fork (29 samples, 2.72%)</title><rect x="1.0300%" y="725" width="2.7154%" height="15" fill="rgb(216,20,37)" fg:x="11" fg:w="29"/><text x="1.2800%" y="735.50">re..</text></g><g><title>schedule_tail (29 samples, 2.72%)</title><rect x="1.0300%" y="709" width="2.7154%" height="15" fill="rgb(206,188,39)" fg:x="11" fg:w="29"/><text x="1.2800%" y="719.50">sc..</text></g><g><title>finish_task_switch (29 samples, 2.72%)</title><rect x="1.0300%" y="693" width="2.7154%" height="15" fill="rgb(217,207,13)" fg:x="11" fg:w="29"/><text x="1.2800%" y="703.50">fi..</text></g><g><title>__perf_event_task_sched_in (28 samples, 2.62%)</title><rect x="1.1236%" y="677" width="2.6217%" height="15" fill="rgb(231,73,38)" fg:x="12" fg:w="28"/><text x="1.3736%" y="687.50">__..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (28 samples, 2.62%)</title><rect x="1.1236%" y="661" width="2.6217%" height="15" fill="rgb(225,20,46)" fg:x="12" fg:w="28"/><text x="1.3736%" y="671.50">__..</text></g><g><title>native_write_msr (28 samples, 2.62%)</title><rect x="1.1236%" y="645" width="2.6217%" height="15" fill="rgb(210,31,41)" fg:x="12" fg:w="28"/><text x="1.3736%" y="655.50">na..</text></g><g><title>[[heap]] (36 samples, 3.37%)</title><rect x="0.4682%" y="757" width="3.3708%" height="15" fill="rgb(221,200,47)" fg:x="5" fg:w="36"/><text x="0.7182%" y="767.50">[[h..</text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="3.7453%" y="741" width="0.0936%" height="15" fill="rgb(226,26,5)" fg:x="40" fg:w="1"/><text x="3.9953%" y="751.50"></text></g><g><title>[libc.so.6] (5 samples, 0.47%)</title><rect x="3.8390%" y="741" width="0.4682%" height="15" fill="rgb(249,33,26)" fg:x="41" fg:w="5"/><text x="4.0890%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (2 samples, 0.19%)</title><rect x="4.3071%" y="741" width="0.1873%" height="15" fill="rgb(235,183,28)" fg:x="46" fg:w="2"/><text x="4.5571%" y="751.50"></text></g><g><title>alloc::raw_vec::finish_grow (12 samples, 1.12%)</title><rect x="4.4944%" y="741" width="1.1236%" height="15" fill="rgb(221,5,38)" fg:x="48" fg:w="12"/><text x="4.7444%" y="751.50"></text></g><g><title>cfree (1 samples, 0.09%)</title><rect x="5.6180%" y="741" width="0.0936%" height="15" fill="rgb(247,18,42)" fg:x="60" fg:w="1"/><text x="5.8680%" y="751.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (2 samples, 0.19%)</title><rect x="6.0861%" y="677" width="0.1873%" height="15" fill="rgb(241,131,45)" fg:x="65" fg:w="2"/><text x="6.3361%" y="687.50"></text></g><g><title>core::hash::Hasher::write_usize (2 samples, 0.19%)</title><rect x="6.0861%" y="661" width="0.1873%" height="15" fill="rgb(249,31,29)" fg:x="65" fg:w="2"/><text x="6.3361%" y="671.50"></text></g><g><title>core::hash::BuildHasher::hash_one (10 samples, 0.94%)</title><rect x="5.7116%" y="741" width="0.9363%" height="15" fill="rgb(225,111,53)" fg:x="61" fg:w="10"/><text x="5.9616%" y="751.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (6 samples, 0.56%)</title><rect x="6.0861%" y="725" width="0.5618%" height="15" fill="rgb(238,160,17)" fg:x="65" fg:w="6"/><text x="6.3361%" y="735.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (6 samples, 0.56%)</title><rect x="6.0861%" y="709" width="0.5618%" height="15" fill="rgb(214,148,48)" fg:x="65" fg:w="6"/><text x="6.3361%" y="719.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (6 samples, 0.56%)</title><rect x="6.0861%" y="693" width="0.5618%" height="15" fill="rgb(232,36,49)" fg:x="65" fg:w="6"/><text x="6.3361%" y="703.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.37%)</title><rect x="6.2734%" y="677" width="0.3745%" height="15" fill="rgb(209,103,24)" fg:x="67" fg:w="4"/><text x="6.5234%" y="687.50"></text></g><g><title>[anon] (33 samples, 3.09%)</title><rect x="3.8390%" y="757" width="3.0899%" height="15" fill="rgb(229,88,8)" fg:x="41" fg:w="33"/><text x="4.0890%" y="767.50">[an..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (3 samples, 0.28%)</title><rect x="6.6479%" y="741" width="0.2809%" height="15" fill="rgb(213,181,19)" fg:x="71" fg:w="3"/><text x="6.8979%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="6.9288%" y="757" width="0.0936%" height="15" fill="rgb(254,191,54)" fg:x="74" fg:w="1"/><text x="7.1788%" y="767.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="6.9288%" y="741" width="0.0936%" height="15" fill="rgb(241,83,37)" fg:x="74" fg:w="1"/><text x="7.1788%" y="751.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="6.9288%" y="725" width="0.0936%" height="15" fill="rgb(233,36,39)" fg:x="74" fg:w="1"/><text x="7.1788%" y="735.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="6.9288%" y="709" width="0.0936%" height="15" fill="rgb(226,3,54)" fg:x="74" fg:w="1"/><text x="7.1788%" y="719.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="6.9288%" y="693" width="0.0936%" height="15" fill="rgb(245,192,40)" fg:x="74" fg:w="1"/><text x="7.1788%" y="703.50"></text></g><g><title>_dl_catch_exception (1 samples, 0.09%)</title><rect x="6.9288%" y="677" width="0.0936%" height="15" fill="rgb(238,167,29)" fg:x="74" fg:w="1"/><text x="7.1788%" y="687.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="6.9288%" y="661" width="0.0936%" height="15" fill="rgb(232,182,51)" fg:x="74" fg:w="1"/><text x="7.1788%" y="671.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="6.9288%" y="645" width="0.0936%" height="15" fill="rgb(231,60,39)" fg:x="74" fg:w="1"/><text x="7.1788%" y="655.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="6.9288%" y="629" width="0.0936%" height="15" fill="rgb(208,69,12)" fg:x="74" fg:w="1"/><text x="7.1788%" y="639.50"></text></g><g><title>[ld-linux-x86-64.so.2] (1 samples, 0.09%)</title><rect x="6.9288%" y="613" width="0.0936%" height="15" fill="rgb(235,93,37)" fg:x="74" fg:w="1"/><text x="7.1788%" y="623.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="6.9288%" y="597" width="0.0936%" height="15" fill="rgb(213,116,39)" fg:x="74" fg:w="1"/><text x="7.1788%" y="607.50"></text></g><g><title>do_syscall_64 (1 samples, 0.09%)</title><rect x="6.9288%" y="581" width="0.0936%" height="15" fill="rgb(222,207,29)" fg:x="74" fg:w="1"/><text x="7.1788%" y="591.50"></text></g><g><title>ksys_mmap_pgoff (1 samples, 0.09%)</title><rect x="6.9288%" y="565" width="0.0936%" height="15" fill="rgb(206,96,30)" fg:x="74" fg:w="1"/><text x="7.1788%" y="575.50"></text></g><g><title>vm_mmap_pgoff (1 samples, 0.09%)</title><rect x="6.9288%" y="549" width="0.0936%" height="15" fill="rgb(218,138,4)" fg:x="74" fg:w="1"/><text x="7.1788%" y="559.50"></text></g><g><title>do_mmap (1 samples, 0.09%)</title><rect x="6.9288%" y="533" width="0.0936%" height="15" fill="rgb(250,191,14)" fg:x="74" fg:w="1"/><text x="7.1788%" y="543.50"></text></g><g><title>mmap_region (1 samples, 0.09%)</title><rect x="6.9288%" y="517" width="0.0936%" height="15" fill="rgb(239,60,40)" fg:x="74" fg:w="1"/><text x="7.1788%" y="527.50"></text></g><g><title>vm_area_alloc (1 samples, 0.09%)</title><rect x="6.9288%" y="501" width="0.0936%" height="15" fill="rgb(206,27,48)" fg:x="74" fg:w="1"/><text x="7.1788%" y="511.50"></text></g><g><title>kmem_cache_alloc (1 samples, 0.09%)</title><rect x="6.9288%" y="485" width="0.0936%" height="15" fill="rgb(225,35,8)" fg:x="74" fg:w="1"/><text x="7.1788%" y="495.50"></text></g><g><title>memcg_slab_post_alloc_hook (1 samples, 0.09%)</title><rect x="6.9288%" y="469" width="0.0936%" height="15" fill="rgb(250,213,24)" fg:x="74" fg:w="1"/><text x="7.1788%" y="479.50"></text></g><g><title>do_syscall_64 (1 samples, 0.09%)</title><rect x="7.1161%" y="709" width="0.0936%" height="15" fill="rgb(247,123,22)" fg:x="76" fg:w="1"/><text x="7.3661%" y="719.50"></text></g><g><title>syscall_trace_enter.constprop.0 (1 samples, 0.09%)</title><rect x="7.1161%" y="693" width="0.0936%" height="15" fill="rgb(231,138,38)" fg:x="76" fg:w="1"/><text x="7.3661%" y="703.50"></text></g><g><title>__audit_syscall_entry (1 samples, 0.09%)</title><rect x="7.1161%" y="677" width="0.0936%" height="15" fill="rgb(231,145,46)" fg:x="76" fg:w="1"/><text x="7.3661%" y="687.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.37%)</title><rect x="7.0225%" y="725" width="0.3745%" height="15" fill="rgb(251,118,11)" fg:x="75" fg:w="4"/><text x="7.2725%" y="735.50"></text></g><g><title>syscall_exit_to_user_mode (2 samples, 0.19%)</title><rect x="7.2097%" y="709" width="0.1873%" height="15" fill="rgb(217,147,25)" fg:x="77" fg:w="2"/><text x="7.4597%" y="719.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.09%)</title><rect x="7.3034%" y="693" width="0.0936%" height="15" fill="rgb(247,81,37)" fg:x="78" fg:w="1"/><text x="7.5534%" y="703.50"></text></g><g><title>__rseq_handle_notify_resume (1 samples, 0.09%)</title><rect x="7.3034%" y="677" width="0.0936%" height="15" fill="rgb(209,12,38)" fg:x="78" fg:w="1"/><text x="7.5534%" y="687.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (23 samples, 2.15%)</title><rect x="19.2884%" y="517" width="2.1536%" height="15" fill="rgb(227,1,9)" fg:x="206" fg:w="23"/><text x="19.5384%" y="527.50">&lt;..</text></g><g><title>core::ptr::read (8 samples, 0.75%)</title><rect x="20.6929%" y="501" width="0.7491%" height="15" fill="rgb(248,47,43)" fg:x="221" fg:w="8"/><text x="20.9429%" y="511.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::is_empty (29 samples, 2.72%)</title><rect x="21.4419%" y="517" width="2.7154%" height="15" fill="rgb(221,10,30)" fg:x="229" fg:w="29"/><text x="21.6919%" y="527.50">al..</text></g><g><title>swapgs_restore_regs_and_return_to_usermode (1 samples, 0.09%)</title><rect x="24.0637%" y="501" width="0.0936%" height="15" fill="rgb(210,229,1)" fg:x="257" fg:w="1"/><text x="24.3137%" y="511.50"></text></g><g><title>&lt;core::result::Result&lt;T,E&gt; as core::ops::try_trait::Try&gt;::branch (4 samples, 0.37%)</title><rect x="26.6854%" y="469" width="0.3745%" height="15" fill="rgb(222,148,37)" fg:x="285" fg:w="4"/><text x="26.9354%" y="479.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (4 samples, 0.37%)</title><rect x="27.0599%" y="469" width="0.3745%" height="15" fill="rgb(234,67,33)" fg:x="289" fg:w="4"/><text x="27.3099%" y="479.50"></text></g><g><title>__rdl_realloc (1 samples, 0.09%)</title><rect x="27.9963%" y="405" width="0.0936%" height="15" fill="rgb(247,98,35)" fg:x="299" fg:w="1"/><text x="28.2463%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::grow (11 samples, 1.03%)</title><rect x="27.9963%" y="453" width="1.0300%" height="15" fill="rgb(247,138,52)" fg:x="299" fg:w="11"/><text x="28.2463%" y="463.50"></text></g><g><title>alloc::alloc::Global::grow_impl (11 samples, 1.03%)</title><rect x="27.9963%" y="437" width="1.0300%" height="15" fill="rgb(213,79,30)" fg:x="299" fg:w="11"/><text x="28.2463%" y="447.50"></text></g><g><title>alloc::alloc::realloc (11 samples, 1.03%)</title><rect x="27.9963%" y="421" width="1.0300%" height="15" fill="rgb(246,177,23)" fg:x="299" fg:w="11"/><text x="28.2463%" y="431.50"></text></g><g><title>realloc (10 samples, 0.94%)</title><rect x="28.0899%" y="405" width="0.9363%" height="15" fill="rgb(230,62,27)" fg:x="300" fg:w="10"/><text x="28.3399%" y="415.50"></text></g><g><title>__rdl_alloc (8 samples, 0.75%)</title><rect x="29.0262%" y="453" width="0.7491%" height="15" fill="rgb(216,154,8)" fg:x="310" fg:w="8"/><text x="29.2762%" y="463.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (8 samples, 0.75%)</title><rect x="29.0262%" y="437" width="0.7491%" height="15" fill="rgb(244,35,45)" fg:x="310" fg:w="8"/><text x="29.2762%" y="447.50"></text></g><g><title>__rust_alloc (3 samples, 0.28%)</title><rect x="29.7753%" y="453" width="0.2809%" height="15" fill="rgb(251,115,12)" fg:x="318" fg:w="3"/><text x="30.0253%" y="463.50"></text></g><g><title>core::result::Result&lt;T,E&gt;::map_err (2 samples, 0.19%)</title><rect x="30.0562%" y="453" width="0.1873%" height="15" fill="rgb(240,54,50)" fg:x="321" fg:w="2"/><text x="30.3062%" y="463.50"></text></g><g><title>alloc::raw_vec::finish_grow (75 samples, 7.02%)</title><rect x="27.4345%" y="469" width="7.0225%" height="15" fill="rgb(233,84,52)" fg:x="293" fg:w="75"/><text x="27.6845%" y="479.50">alloc::ra..</text></g><g><title>malloc (45 samples, 4.21%)</title><rect x="30.2434%" y="453" width="4.2135%" height="15" fill="rgb(207,117,47)" fg:x="323" fg:w="45"/><text x="30.4934%" y="463.50">malloc</text></g><g><title>[libc.so.6] (3 samples, 0.28%)</title><rect x="34.1760%" y="437" width="0.2809%" height="15" fill="rgb(249,43,39)" fg:x="365" fg:w="3"/><text x="34.4260%" y="447.50"></text></g><g><title>core::alloc::layout::Layout::array (1 samples, 0.09%)</title><rect x="34.4569%" y="469" width="0.0936%" height="15" fill="rgb(209,38,44)" fg:x="368" fg:w="1"/><text x="34.7069%" y="479.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (1 samples, 0.09%)</title><rect x="34.4569%" y="453" width="0.0936%" height="15" fill="rgb(236,212,23)" fg:x="368" fg:w="1"/><text x="34.7069%" y="463.50"></text></g><g><title>core::cmp::max (11 samples, 1.03%)</title><rect x="34.5506%" y="469" width="1.0300%" height="15" fill="rgb(242,79,21)" fg:x="369" fg:w="11"/><text x="34.8006%" y="479.50"></text></g><g><title>core::cmp::Ord::max (11 samples, 1.03%)</title><rect x="34.5506%" y="453" width="1.0300%" height="15" fill="rgb(211,96,35)" fg:x="369" fg:w="11"/><text x="34.8006%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (124 samples, 11.61%)</title><rect x="24.1573%" y="517" width="11.6105%" height="15" fill="rgb(253,215,40)" fg:x="258" fg:w="124"/><text x="24.4073%" y="527.50">alloc::vec::Vec&lt;T..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (103 samples, 9.64%)</title><rect x="26.1236%" y="501" width="9.6442%" height="15" fill="rgb(211,81,21)" fg:x="279" fg:w="103"/><text x="26.3736%" y="511.50">alloc::raw_vec..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (103 samples, 9.64%)</title><rect x="26.1236%" y="485" width="9.6442%" height="15" fill="rgb(208,190,38)" fg:x="279" fg:w="103"/><text x="26.3736%" y="495.50">alloc::raw_vec..</text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (2 samples, 0.19%)</title><rect x="35.5805%" y="469" width="0.1873%" height="15" fill="rgb(235,213,38)" fg:x="380" fg:w="2"/><text x="35.8305%" y="479.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (2 samples, 0.19%)</title><rect x="35.5805%" y="453" width="0.1873%" height="15" fill="rgb(237,122,38)" fg:x="380" fg:w="2"/><text x="35.8305%" y="463.50"></text></g><g><title>alloc::vec::Vec&lt;T&gt;::with_capacity (4 samples, 0.37%)</title><rect x="35.7678%" y="517" width="0.3745%" height="15" fill="rgb(244,218,35)" fg:x="382" fg:w="4"/><text x="36.0178%" y="527.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::with_capacity_in (4 samples, 0.37%)</title><rect x="35.7678%" y="501" width="0.3745%" height="15" fill="rgb(240,68,47)" fg:x="382" fg:w="4"/><text x="36.0178%" y="511.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::with_capacity_in (4 samples, 0.37%)</title><rect x="35.7678%" y="485" width="0.3745%" height="15" fill="rgb(210,16,53)" fg:x="382" fg:w="4"/><text x="36.0178%" y="495.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::allocate_in (4 samples, 0.37%)</title><rect x="35.7678%" y="469" width="0.3745%" height="15" fill="rgb(235,124,12)" fg:x="382" fg:w="4"/><text x="36.0178%" y="479.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.09%)</title><rect x="36.1423%" y="517" width="0.0936%" height="15" fill="rgb(224,169,11)" fg:x="386" fg:w="1"/><text x="36.3923%" y="527.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.09%)</title><rect x="36.1423%" y="501" width="0.0936%" height="15" fill="rgb(250,166,2)" fg:x="386" fg:w="1"/><text x="36.3923%" y="511.50"></text></g><g><title>__sysvec_apic_timer_interrupt (1 samples, 0.09%)</title><rect x="36.1423%" y="485" width="0.0936%" height="15" fill="rgb(242,216,29)" fg:x="386" fg:w="1"/><text x="36.3923%" y="495.50"></text></g><g><title>hrtimer_interrupt (1 samples, 0.09%)</title><rect x="36.1423%" y="469" width="0.0936%" height="15" fill="rgb(230,116,27)" fg:x="386" fg:w="1"/><text x="36.3923%" y="479.50"></text></g><g><title>__hrtimer_run_queues (1 samples, 0.09%)</title><rect x="36.1423%" y="453" width="0.0936%" height="15" fill="rgb(228,99,48)" fg:x="386" fg:w="1"/><text x="36.3923%" y="463.50"></text></g><g><title>tick_sched_timer (1 samples, 0.09%)</title><rect x="36.1423%" y="437" width="0.0936%" height="15" fill="rgb(253,11,6)" fg:x="386" fg:w="1"/><text x="36.3923%" y="447.50"></text></g><g><title>tick_sched_handle (1 samples, 0.09%)</title><rect x="36.1423%" y="421" width="0.0936%" height="15" fill="rgb(247,143,39)" fg:x="386" fg:w="1"/><text x="36.3923%" y="431.50"></text></g><g><title>update_process_times (1 samples, 0.09%)</title><rect x="36.1423%" y="405" width="0.0936%" height="15" fill="rgb(236,97,10)" fg:x="386" fg:w="1"/><text x="36.3923%" y="415.50"></text></g><g><title>scheduler_tick (1 samples, 0.09%)</title><rect x="36.1423%" y="389" width="0.0936%" height="15" fill="rgb(233,208,19)" fg:x="386" fg:w="1"/><text x="36.3923%" y="399.50"></text></g><g><title>arch_scale_freq_tick (1 samples, 0.09%)</title><rect x="36.1423%" y="373" width="0.0936%" height="15" fill="rgb(216,164,2)" fg:x="386" fg:w="1"/><text x="36.3923%" y="383.50"></text></g><g><title>native_read_msr (1 samples, 0.09%)</title><rect x="36.1423%" y="357" width="0.0936%" height="15" fill="rgb(220,129,5)" fg:x="386" fg:w="1"/><text x="36.3923%" y="367.50"></text></g><g><title>tlb_finish_mmu (3 samples, 0.28%)</title><rect x="36.2360%" y="261" width="0.2809%" height="15" fill="rgb(242,17,10)" fg:x="387" fg:w="3"/><text x="36.4860%" y="271.50"></text></g><g><title>release_pages (3 samples, 0.28%)</title><rect x="36.2360%" y="245" width="0.2809%" height="15" fill="rgb(242,107,0)" fg:x="387" fg:w="3"/><text x="36.4860%" y="255.50"></text></g><g><title>free_unref_page_list (3 samples, 0.28%)</title><rect x="36.2360%" y="229" width="0.2809%" height="15" fill="rgb(251,28,31)" fg:x="387" fg:w="3"/><text x="36.4860%" y="239.50"></text></g><g><title>free_pcppages_bulk (3 samples, 0.28%)</title><rect x="36.2360%" y="213" width="0.2809%" height="15" fill="rgb(233,223,10)" fg:x="387" fg:w="3"/><text x="36.4860%" y="223.50"></text></g><g><title>__free_one_page (3 samples, 0.28%)</title><rect x="36.2360%" y="197" width="0.2809%" height="15" fill="rgb(215,21,27)" fg:x="387" fg:w="3"/><text x="36.4860%" y="207.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::into_iter::IntoIter&lt;u8&gt;&gt; (4 samples, 0.37%)</title><rect x="36.2360%" y="517" width="0.3745%" height="15" fill="rgb(232,23,21)" fg:x="387" fg:w="4"/><text x="36.4860%" y="527.50"></text></g><g><title>&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.37%)</title><rect x="36.2360%" y="501" width="0.3745%" height="15" fill="rgb(244,5,23)" fg:x="387" fg:w="4"/><text x="36.4860%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;u8,alloc::alloc::Global&gt;&gt; (4 samples, 0.37%)</title><rect x="36.2360%" y="485" width="0.3745%" height="15" fill="rgb(226,81,46)" fg:x="387" fg:w="4"/><text x="36.4860%" y="495.50"></text></g><g><title>&lt;&lt;alloc::vec::into_iter::IntoIter&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop::DropGuard&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.37%)</title><rect x="36.2360%" y="469" width="0.3745%" height="15" fill="rgb(247,70,30)" fg:x="387" fg:w="4"/><text x="36.4860%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (4 samples, 0.37%)</title><rect x="36.2360%" y="453" width="0.3745%" height="15" fill="rgb(212,68,19)" fg:x="387" fg:w="4"/><text x="36.4860%" y="463.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (4 samples, 0.37%)</title><rect x="36.2360%" y="437" width="0.3745%" height="15" fill="rgb(240,187,13)" fg:x="387" fg:w="4"/><text x="36.4860%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (4 samples, 0.37%)</title><rect x="36.2360%" y="421" width="0.3745%" height="15" fill="rgb(223,113,26)" fg:x="387" fg:w="4"/><text x="36.4860%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (4 samples, 0.37%)</title><rect x="36.2360%" y="405" width="0.3745%" height="15" fill="rgb(206,192,2)" fg:x="387" fg:w="4"/><text x="36.4860%" y="415.50"></text></g><g><title>cfree (4 samples, 0.37%)</title><rect x="36.2360%" y="389" width="0.3745%" height="15" fill="rgb(241,108,4)" fg:x="387" fg:w="4"/><text x="36.4860%" y="399.50"></text></g><g><title>__munmap (4 samples, 0.37%)</title><rect x="36.2360%" y="373" width="0.3745%" height="15" fill="rgb(247,173,49)" fg:x="387" fg:w="4"/><text x="36.4860%" y="383.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (4 samples, 0.37%)</title><rect x="36.2360%" y="357" width="0.3745%" height="15" fill="rgb(224,114,35)" fg:x="387" fg:w="4"/><text x="36.4860%" y="367.50"></text></g><g><title>do_syscall_64 (4 samples, 0.37%)</title><rect x="36.2360%" y="341" width="0.3745%" height="15" fill="rgb(245,159,27)" fg:x="387" fg:w="4"/><text x="36.4860%" y="351.50"></text></g><g><title>__x64_sys_munmap (4 samples, 0.37%)</title><rect x="36.2360%" y="325" width="0.3745%" height="15" fill="rgb(245,172,44)" fg:x="387" fg:w="4"/><text x="36.4860%" y="335.50"></text></g><g><title>__vm_munmap (4 samples, 0.37%)</title><rect x="36.2360%" y="309" width="0.3745%" height="15" fill="rgb(236,23,11)" fg:x="387" fg:w="4"/><text x="36.4860%" y="319.50"></text></g><g><title>__do_munmap (4 samples, 0.37%)</title><rect x="36.2360%" y="293" width="0.3745%" height="15" fill="rgb(205,117,38)" fg:x="387" fg:w="4"/><text x="36.4860%" y="303.50"></text></g><g><title>unmap_region (4 samples, 0.37%)</title><rect x="36.2360%" y="277" width="0.3745%" height="15" fill="rgb(237,72,25)" fg:x="387" fg:w="4"/><text x="36.4860%" y="287.50"></text></g><g><title>unmap_vmas (1 samples, 0.09%)</title><rect x="36.5169%" y="261" width="0.0936%" height="15" fill="rgb(244,70,9)" fg:x="390" fg:w="1"/><text x="36.7669%" y="271.50"></text></g><g><title>unmap_page_range (1 samples, 0.09%)</title><rect x="36.5169%" y="245" width="0.0936%" height="15" fill="rgb(217,125,39)" fg:x="390" fg:w="1"/><text x="36.7669%" y="255.50"></text></g><g><title>core::slice::&lt;impl [T]&gt;::get_mut (2 samples, 0.19%)</title><rect x="36.6105%" y="517" width="0.1873%" height="15" fill="rgb(235,36,10)" fg:x="391" fg:w="2"/><text x="36.8605%" y="527.50"></text></g><g><title>&lt;usize as core::slice::index::SliceIndex&lt;[T]&gt;&gt;::get_mut (2 samples, 0.19%)</title><rect x="36.6105%" y="501" width="0.1873%" height="15" fill="rgb(251,123,47)" fg:x="391" fg:w="2"/><text x="36.8605%" y="511.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::and_modify (1 samples, 0.09%)</title><rect x="36.7978%" y="517" width="0.0936%" height="15" fill="rgb(221,13,13)" fg:x="393" fg:w="1"/><text x="37.0478%" y="527.50"></text></g><g><title>super_word_counter::swc::mapper::map::{{closure}} (1 samples, 0.09%)</title><rect x="36.7978%" y="501" width="0.0936%" height="15" fill="rgb(238,131,9)" fg:x="393" fg:w="1"/><text x="37.0478%" y="511.50"></text></g><g><title>__rdl_dealloc (1 samples, 0.09%)</title><rect x="37.5468%" y="357" width="0.0936%" height="15" fill="rgb(211,50,8)" fg:x="401" fg:w="1"/><text x="37.7968%" y="367.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::dealloc (1 samples, 0.09%)</title><rect x="37.5468%" y="341" width="0.0936%" height="15" fill="rgb(245,182,24)" fg:x="401" fg:w="1"/><text x="37.7968%" y="351.50"></text></g><g><title>__rust_dealloc (1 samples, 0.09%)</title><rect x="37.6404%" y="357" width="0.0936%" height="15" fill="rgb(242,14,37)" fg:x="402" fg:w="1"/><text x="37.8904%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (46 samples, 4.31%)</title><rect x="37.1723%" y="389" width="4.3071%" height="15" fill="rgb(246,228,12)" fg:x="397" fg:w="46"/><text x="37.4223%" y="399.50">&lt;allo..</text></g><g><title>alloc::alloc::dealloc (46 samples, 4.31%)</title><rect x="37.1723%" y="373" width="4.3071%" height="15" fill="rgb(213,55,15)" fg:x="397" fg:w="46"/><text x="37.4223%" y="383.50">alloc..</text></g><g><title>cfree (40 samples, 3.75%)</title><rect x="37.7341%" y="357" width="3.7453%" height="15" fill="rgb(209,9,3)" fg:x="403" fg:w="40"/><text x="37.9841%" y="367.50">cfree</text></g><g><title>[libc.so.6] (23 samples, 2.15%)</title><rect x="39.3258%" y="341" width="2.1536%" height="15" fill="rgb(230,59,30)" fg:x="420" fg:w="23"/><text x="39.5758%" y="351.50">[..</text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (51 samples, 4.78%)</title><rect x="36.8914%" y="501" width="4.7753%" height="15" fill="rgb(209,121,21)" fg:x="394" fg:w="51"/><text x="37.1414%" y="511.50">std::c..</text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (51 samples, 4.78%)</title><rect x="36.8914%" y="485" width="4.7753%" height="15" fill="rgb(220,109,13)" fg:x="394" fg:w="51"/><text x="37.1414%" y="495.50">hashbr..</text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::vec::Vec&lt;u8&gt;,u64&gt;&gt; (51 samples, 4.78%)</title><rect x="36.8914%" y="469" width="4.7753%" height="15" fill="rgb(232,18,1)" fg:x="394" fg:w="51"/><text x="37.1414%" y="479.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (51 samples, 4.78%)</title><rect x="36.8914%" y="453" width="4.7753%" height="15" fill="rgb(215,41,42)" fg:x="394" fg:w="51"/><text x="37.1414%" y="463.50">core::..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (48 samples, 4.49%)</title><rect x="37.1723%" y="437" width="4.4944%" height="15" fill="rgb(224,123,36)" fg:x="397" fg:w="48"/><text x="37.4223%" y="447.50">core:..</text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (48 samples, 4.49%)</title><rect x="37.1723%" y="421" width="4.4944%" height="15" fill="rgb(240,125,3)" fg:x="397" fg:w="48"/><text x="37.4223%" y="431.50">core:..</text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (48 samples, 4.49%)</title><rect x="37.1723%" y="405" width="4.4944%" height="15" fill="rgb(205,98,50)" fg:x="397" fg:w="48"/><text x="37.4223%" y="415.50">&lt;allo..</text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::current_memory (2 samples, 0.19%)</title><rect x="41.4794%" y="389" width="0.1873%" height="15" fill="rgb(205,185,37)" fg:x="443" fg:w="2"/><text x="41.7294%" y="399.50"></text></g><g><title>core::alloc::layout::Layout::array (2 samples, 0.19%)</title><rect x="41.4794%" y="373" width="0.1873%" height="15" fill="rgb(238,207,15)" fg:x="443" fg:w="2"/><text x="41.7294%" y="383.50"></text></g><g><title>core::alloc::layout::Layout::array::inner (2 samples, 0.19%)</title><rect x="41.4794%" y="357" width="0.1873%" height="15" fill="rgb(213,199,42)" fg:x="443" fg:w="2"/><text x="41.7294%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (53 samples, 4.96%)</title><rect x="36.8914%" y="517" width="4.9625%" height="15" fill="rgb(235,201,11)" fg:x="394" fg:w="53"/><text x="37.1414%" y="527.50">std::c..</text></g><g><title>std::collections::hash::map::VacantEntry&lt;K,V&gt;::insert (2 samples, 0.19%)</title><rect x="41.6667%" y="501" width="0.1873%" height="15" fill="rgb(207,46,11)" fg:x="445" fg:w="2"/><text x="41.9167%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::RustcVacantEntry&lt;K,V,A&gt;::insert (2 samples, 0.19%)</title><rect x="41.6667%" y="485" width="0.1873%" height="15" fill="rgb(241,35,35)" fg:x="445" fg:w="2"/><text x="41.9167%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert_no_grow (2 samples, 0.19%)</title><rect x="41.6667%" y="469" width="0.1873%" height="15" fill="rgb(243,32,47)" fg:x="445" fg:w="2"/><text x="41.9167%" y="479.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (2 samples, 0.19%)</title><rect x="41.6667%" y="453" width="0.1873%" height="15" fill="rgb(247,202,23)" fg:x="445" fg:w="2"/><text x="41.9167%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.19%)</title><rect x="41.6667%" y="437" width="0.1873%" height="15" fill="rgb(219,102,11)" fg:x="445" fg:w="2"/><text x="41.9167%" y="447.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.09%)</title><rect x="41.7603%" y="421" width="0.0936%" height="15" fill="rgb(243,110,44)" fg:x="446" fg:w="1"/><text x="42.0103%" y="431.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.09%)</title><rect x="41.7603%" y="405" width="0.0936%" height="15" fill="rgb(222,74,54)" fg:x="446" fg:w="1"/><text x="42.0103%" y="415.50"></text></g><g><title>lru_cache_add (1 samples, 0.09%)</title><rect x="42.7903%" y="325" width="0.0936%" height="15" fill="rgb(216,99,12)" fg:x="457" fg:w="1"/><text x="43.0403%" y="335.50"></text></g><g><title>pagevec_lru_move_fn (1 samples, 0.09%)</title><rect x="42.7903%" y="309" width="0.0936%" height="15" fill="rgb(226,22,26)" fg:x="457" fg:w="1"/><text x="43.0403%" y="319.50"></text></g><g><title>__pagevec_lru_add_fn (1 samples, 0.09%)</title><rect x="42.7903%" y="293" width="0.0936%" height="15" fill="rgb(217,163,10)" fg:x="457" fg:w="1"/><text x="43.0403%" y="303.50"></text></g><g><title>exc_page_fault (3 samples, 0.28%)</title><rect x="42.6966%" y="373" width="0.2809%" height="15" fill="rgb(213,25,53)" fg:x="456" fg:w="3"/><text x="42.9466%" y="383.50"></text></g><g><title>do_user_addr_fault (3 samples, 0.28%)</title><rect x="42.6966%" y="357" width="0.2809%" height="15" fill="rgb(252,105,26)" fg:x="456" fg:w="3"/><text x="42.9466%" y="367.50"></text></g><g><title>handle_mm_fault (3 samples, 0.28%)</title><rect x="42.6966%" y="341" width="0.2809%" height="15" fill="rgb(220,39,43)" fg:x="456" fg:w="3"/><text x="42.9466%" y="351.50"></text></g><g><title>page_add_new_anon_rmap (1 samples, 0.09%)</title><rect x="42.8839%" y="325" width="0.0936%" height="15" fill="rgb(229,68,48)" fg:x="458" fg:w="1"/><text x="43.1339%" y="335.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (6 samples, 0.56%)</title><rect x="42.5094%" y="405" width="0.5618%" height="15" fill="rgb(252,8,32)" fg:x="454" fg:w="6"/><text x="42.7594%" y="415.50"></text></g><g><title>asm_exc_page_fault (4 samples, 0.37%)</title><rect x="42.6966%" y="389" width="0.3745%" height="15" fill="rgb(223,20,43)" fg:x="456" fg:w="4"/><text x="42.9466%" y="399.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.09%)</title><rect x="42.9775%" y="373" width="0.0936%" height="15" fill="rgb(229,81,49)" fg:x="459" fg:w="1"/><text x="43.2275%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (1 samples, 0.09%)</title><rect x="43.0712%" y="293" width="0.0936%" height="15" fill="rgb(236,28,36)" fg:x="460" fg:w="1"/><text x="43.3212%" y="303.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (1 samples, 0.09%)</title><rect x="43.0712%" y="277" width="0.0936%" height="15" fill="rgb(249,185,26)" fg:x="460" fg:w="1"/><text x="43.3212%" y="287.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (2 samples, 0.19%)</title><rect x="43.0712%" y="341" width="0.1873%" height="15" fill="rgb(249,174,33)" fg:x="460" fg:w="2"/><text x="43.3212%" y="351.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (2 samples, 0.19%)</title><rect x="43.0712%" y="325" width="0.1873%" height="15" fill="rgb(233,201,37)" fg:x="460" fg:w="2"/><text x="43.3212%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (2 samples, 0.19%)</title><rect x="43.0712%" y="309" width="0.1873%" height="15" fill="rgb(221,78,26)" fg:x="460" fg:w="2"/><text x="43.3212%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (1 samples, 0.09%)</title><rect x="43.1648%" y="293" width="0.0936%" height="15" fill="rgb(250,127,30)" fg:x="461" fg:w="1"/><text x="43.4148%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (3 samples, 0.28%)</title><rect x="43.2584%" y="229" width="0.2809%" height="15" fill="rgb(230,49,44)" fg:x="462" fg:w="3"/><text x="43.5084%" y="239.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (3 samples, 0.28%)</title><rect x="43.2584%" y="213" width="0.2809%" height="15" fill="rgb(229,67,23)" fg:x="462" fg:w="3"/><text x="43.5084%" y="223.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (13 samples, 1.22%)</title><rect x="43.0712%" y="405" width="1.2172%" height="15" fill="rgb(249,83,47)" fg:x="460" fg:w="13"/><text x="43.3212%" y="415.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (13 samples, 1.22%)</title><rect x="43.0712%" y="389" width="1.2172%" height="15" fill="rgb(215,43,3)" fg:x="460" fg:w="13"/><text x="43.3212%" y="399.50"></text></g><g><title>hashbrown::map::make_hash (13 samples, 1.22%)</title><rect x="43.0712%" y="373" width="1.2172%" height="15" fill="rgb(238,154,13)" fg:x="460" fg:w="13"/><text x="43.3212%" y="383.50"></text></g><g><title>core::hash::BuildHasher::hash_one (13 samples, 1.22%)</title><rect x="43.0712%" y="357" width="1.2172%" height="15" fill="rgb(219,56,2)" fg:x="460" fg:w="13"/><text x="43.3212%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (11 samples, 1.03%)</title><rect x="43.2584%" y="341" width="1.0300%" height="15" fill="rgb(233,0,4)" fg:x="462" fg:w="11"/><text x="43.5084%" y="351.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (11 samples, 1.03%)</title><rect x="43.2584%" y="325" width="1.0300%" height="15" fill="rgb(235,30,7)" fg:x="462" fg:w="11"/><text x="43.5084%" y="335.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (11 samples, 1.03%)</title><rect x="43.2584%" y="309" width="1.0300%" height="15" fill="rgb(250,79,13)" fg:x="462" fg:w="11"/><text x="43.5084%" y="319.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (11 samples, 1.03%)</title><rect x="43.2584%" y="293" width="1.0300%" height="15" fill="rgb(211,146,34)" fg:x="462" fg:w="11"/><text x="43.5084%" y="303.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (11 samples, 1.03%)</title><rect x="43.2584%" y="277" width="1.0300%" height="15" fill="rgb(228,22,38)" fg:x="462" fg:w="11"/><text x="43.5084%" y="287.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (11 samples, 1.03%)</title><rect x="43.2584%" y="261" width="1.0300%" height="15" fill="rgb(235,168,5)" fg:x="462" fg:w="11"/><text x="43.5084%" y="271.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (11 samples, 1.03%)</title><rect x="43.2584%" y="245" width="1.0300%" height="15" fill="rgb(221,155,16)" fg:x="462" fg:w="11"/><text x="43.5084%" y="255.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (8 samples, 0.75%)</title><rect x="43.5393%" y="229" width="0.7491%" height="15" fill="rgb(215,215,53)" fg:x="465" fg:w="8"/><text x="43.7893%" y="239.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.09%)</title><rect x="44.2884%" y="373" width="0.0936%" height="15" fill="rgb(223,4,10)" fg:x="473" fg:w="1"/><text x="44.5384%" y="383.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (2 samples, 0.19%)</title><rect x="44.3820%" y="373" width="0.1873%" height="15" fill="rgb(234,103,6)" fg:x="474" fg:w="2"/><text x="44.6320%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (2 samples, 0.19%)</title><rect x="44.3820%" y="357" width="0.1873%" height="15" fill="rgb(227,97,0)" fg:x="474" fg:w="2"/><text x="44.6320%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.19%)</title><rect x="44.3820%" y="341" width="0.1873%" height="15" fill="rgb(234,150,53)" fg:x="474" fg:w="2"/><text x="44.6320%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (4 samples, 0.37%)</title><rect x="44.2884%" y="389" width="0.3745%" height="15" fill="rgb(228,201,54)" fg:x="473" fg:w="4"/><text x="44.5384%" y="399.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty_or_deleted (1 samples, 0.09%)</title><rect x="44.5693%" y="373" width="0.0936%" height="15" fill="rgb(222,22,37)" fg:x="476" fg:w="1"/><text x="44.8193%" y="383.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.09%)</title><rect x="44.5693%" y="357" width="0.0936%" height="15" fill="rgb(237,53,32)" fg:x="476" fg:w="1"/><text x="44.8193%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (5 samples, 0.47%)</title><rect x="44.2884%" y="405" width="0.4682%" height="15" fill="rgb(233,25,53)" fg:x="473" fg:w="5"/><text x="44.5384%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl_h2 (1 samples, 0.09%)</title><rect x="44.6629%" y="389" width="0.0936%" height="15" fill="rgb(210,40,34)" fg:x="477" fg:w="1"/><text x="44.9129%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::set_ctrl (1 samples, 0.09%)</title><rect x="44.6629%" y="373" width="0.0936%" height="15" fill="rgb(241,220,44)" fg:x="477" fg:w="1"/><text x="44.9129%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (25 samples, 2.34%)</title><rect x="42.5094%" y="485" width="2.3408%" height="15" fill="rgb(235,28,35)" fg:x="454" fg:w="25"/><text x="42.7594%" y="495.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (25 samples, 2.34%)</title><rect x="42.5094%" y="469" width="2.3408%" height="15" fill="rgb(210,56,17)" fg:x="454" fg:w="25"/><text x="42.7594%" y="479.50">h..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (25 samples, 2.34%)</title><rect x="42.5094%" y="453" width="2.3408%" height="15" fill="rgb(224,130,29)" fg:x="454" fg:w="25"/><text x="42.7594%" y="463.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (25 samples, 2.34%)</title><rect x="42.5094%" y="437" width="2.3408%" height="15" fill="rgb(235,212,8)" fg:x="454" fg:w="25"/><text x="42.7594%" y="447.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (25 samples, 2.34%)</title><rect x="42.5094%" y="421" width="2.3408%" height="15" fill="rgb(223,33,50)" fg:x="454" fg:w="25"/><text x="42.7594%" y="431.50">h..</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (1 samples, 0.09%)</title><rect x="44.7566%" y="405" width="0.0936%" height="15" fill="rgb(219,149,13)" fg:x="478" fg:w="1"/><text x="45.0066%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (1 samples, 0.09%)</title><rect x="44.7566%" y="389" width="0.0936%" height="15" fill="rgb(250,156,29)" fg:x="478" fg:w="1"/><text x="45.0066%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (1 samples, 0.09%)</title><rect x="44.7566%" y="373" width="0.0936%" height="15" fill="rgb(216,193,19)" fg:x="478" fg:w="1"/><text x="45.0066%" y="383.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (1 samples, 0.09%)</title><rect x="44.7566%" y="357" width="0.0936%" height="15" fill="rgb(216,135,14)" fg:x="478" fg:w="1"/><text x="45.0066%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (1 samples, 0.09%)</title><rect x="44.7566%" y="341" width="0.0936%" height="15" fill="rgb(241,47,5)" fg:x="478" fg:w="1"/><text x="45.0066%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (1 samples, 0.09%)</title><rect x="44.7566%" y="325" width="0.0936%" height="15" fill="rgb(233,42,35)" fg:x="478" fg:w="1"/><text x="45.0066%" y="335.50"></text></g><g><title>alloc::alloc::alloc (1 samples, 0.09%)</title><rect x="44.7566%" y="309" width="0.0936%" height="15" fill="rgb(231,13,6)" fg:x="478" fg:w="1"/><text x="45.0066%" y="319.50"></text></g><g><title>malloc (1 samples, 0.09%)</title><rect x="44.7566%" y="293" width="0.0936%" height="15" fill="rgb(207,181,40)" fg:x="478" fg:w="1"/><text x="45.0066%" y="303.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="44.7566%" y="277" width="0.0936%" height="15" fill="rgb(254,173,49)" fg:x="478" fg:w="1"/><text x="45.0066%" y="287.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="44.7566%" y="261" width="0.0936%" height="15" fill="rgb(221,1,38)" fg:x="478" fg:w="1"/><text x="45.0066%" y="271.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (5 samples, 0.47%)</title><rect x="45.8801%" y="389" width="0.4682%" height="15" fill="rgb(206,124,46)" fg:x="490" fg:w="5"/><text x="46.1301%" y="399.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (11 samples, 1.03%)</title><rect x="45.5993%" y="405" width="1.0300%" height="15" fill="rgb(249,21,11)" fg:x="487" fg:w="11"/><text x="45.8493%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.28%)</title><rect x="46.3483%" y="389" width="0.2809%" height="15" fill="rgb(222,201,40)" fg:x="495" fg:w="3"/><text x="46.5983%" y="399.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (20 samples, 1.87%)</title><rect x="47.3783%" y="389" width="1.8727%" height="15" fill="rgb(235,61,29)" fg:x="506" fg:w="20"/><text x="47.6283%" y="399.50">c..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::finish (53 samples, 4.96%)</title><rect x="44.9438%" y="453" width="4.9625%" height="15" fill="rgb(219,207,3)" fg:x="480" fg:w="53"/><text x="45.1938%" y="463.50">&lt;std::..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::finish (53 samples, 4.96%)</title><rect x="44.9438%" y="437" width="4.9625%" height="15" fill="rgb(222,56,46)" fg:x="480" fg:w="53"/><text x="45.1938%" y="447.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::finish (53 samples, 4.96%)</title><rect x="44.9438%" y="421" width="4.9625%" height="15" fill="rgb(239,76,54)" fg:x="480" fg:w="53"/><text x="45.1938%" y="431.50">&lt;core:..</text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::d_rounds (35 samples, 3.28%)</title><rect x="46.6292%" y="405" width="3.2772%" height="15" fill="rgb(231,124,27)" fg:x="498" fg:w="35"/><text x="46.8792%" y="415.50">&lt;co..</text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (7 samples, 0.66%)</title><rect x="49.2509%" y="389" width="0.6554%" height="15" fill="rgb(249,195,6)" fg:x="526" fg:w="7"/><text x="49.5009%" y="399.50"></text></g><g><title>&lt;std::collections::hash::map::RandomState as core::hash::BuildHasher&gt;::build_hasher (16 samples, 1.50%)</title><rect x="49.9064%" y="453" width="1.4981%" height="15" fill="rgb(237,174,47)" fg:x="533" fg:w="16"/><text x="50.1564%" y="463.50"></text></g><g><title>core::hash::sip::SipHasher13::new_with_keys (7 samples, 0.66%)</title><rect x="50.7491%" y="437" width="0.6554%" height="15" fill="rgb(206,201,31)" fg:x="542" fg:w="7"/><text x="50.9991%" y="447.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::new_with_keys (7 samples, 0.66%)</title><rect x="50.7491%" y="421" width="0.6554%" height="15" fill="rgb(231,57,52)" fg:x="542" fg:w="7"/><text x="50.9991%" y="431.50"></text></g><g><title>core::hash::sip::Hasher&lt;S&gt;::reset (7 samples, 0.66%)</title><rect x="50.7491%" y="405" width="0.6554%" height="15" fill="rgb(248,177,22)" fg:x="542" fg:w="7"/><text x="50.9991%" y="415.50"></text></g><g><title>core::num::&lt;impl u64&gt;::rotate_left (3 samples, 0.28%)</title><rect x="54.0262%" y="309" width="0.2809%" height="15" fill="rgb(215,211,37)" fg:x="577" fg:w="3"/><text x="54.2762%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (9 samples, 0.84%)</title><rect x="53.7453%" y="325" width="0.8427%" height="15" fill="rgb(241,128,51)" fg:x="574" fg:w="9"/><text x="53.9953%" y="335.50"></text></g><g><title>core::num::&lt;impl u64&gt;::wrapping_add (3 samples, 0.28%)</title><rect x="54.3071%" y="309" width="0.2809%" height="15" fill="rgb(227,165,31)" fg:x="580" fg:w="3"/><text x="54.5571%" y="319.50"></text></g><g><title>core::hash::sip::u8to64_le (6 samples, 0.56%)</title><rect x="54.5880%" y="325" width="0.5618%" height="15" fill="rgb(228,167,24)" fg:x="583" fg:w="6"/><text x="54.8380%" y="335.50"></text></g><g><title>core::hash::Hasher::write_length_prefix (40 samples, 3.75%)</title><rect x="51.4981%" y="405" width="3.7453%" height="15" fill="rgb(228,143,12)" fg:x="550" fg:w="40"/><text x="51.7481%" y="415.50">core..</text></g><g><title>core::hash::Hasher::write_usize (40 samples, 3.75%)</title><rect x="51.4981%" y="389" width="3.7453%" height="15" fill="rgb(249,149,8)" fg:x="550" fg:w="40"/><text x="51.7481%" y="399.50">core..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (36 samples, 3.37%)</title><rect x="51.8727%" y="373" width="3.3708%" height="15" fill="rgb(243,35,44)" fg:x="554" fg:w="36"/><text x="52.1227%" y="383.50">&lt;st..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (36 samples, 3.37%)</title><rect x="51.8727%" y="357" width="3.3708%" height="15" fill="rgb(246,89,9)" fg:x="554" fg:w="36"/><text x="52.1227%" y="367.50">&lt;co..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (36 samples, 3.37%)</title><rect x="51.8727%" y="341" width="3.3708%" height="15" fill="rgb(233,213,13)" fg:x="554" fg:w="36"/><text x="52.1227%" y="351.50">&lt;co..</text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.09%)</title><rect x="55.1498%" y="325" width="0.0936%" height="15" fill="rgb(233,141,41)" fg:x="589" fg:w="1"/><text x="55.3998%" y="335.50"></text></g><g><title>&lt;core::hash::sip::Sip13Rounds as core::hash::sip::Sip&gt;::c_rounds (2 samples, 0.19%)</title><rect x="56.5543%" y="341" width="0.1873%" height="15" fill="rgb(239,167,4)" fg:x="604" fg:w="2"/><text x="56.8043%" y="351.50"></text></g><g><title>hashbrown::map::make_insert_hash (142 samples, 13.30%)</title><rect x="44.8502%" y="485" width="13.2959%" height="15" fill="rgb(209,217,16)" fg:x="479" fg:w="142"/><text x="45.1002%" y="495.50">hashbrown::map::make..</text></g><g><title>core::hash::BuildHasher::hash_one (142 samples, 13.30%)</title><rect x="44.8502%" y="469" width="13.2959%" height="15" fill="rgb(219,88,35)" fg:x="479" fg:w="142"/><text x="45.1002%" y="479.50">core::hash::BuildHas..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (72 samples, 6.74%)</title><rect x="51.4045%" y="453" width="6.7416%" height="15" fill="rgb(220,193,23)" fg:x="549" fg:w="72"/><text x="51.6545%" y="463.50">core::has..</text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (71 samples, 6.65%)</title><rect x="51.4981%" y="437" width="6.6479%" height="15" fill="rgb(230,90,52)" fg:x="550" fg:w="71"/><text x="51.7481%" y="447.50">&lt;alloc::v..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (71 samples, 6.65%)</title><rect x="51.4981%" y="421" width="6.6479%" height="15" fill="rgb(252,106,19)" fg:x="550" fg:w="71"/><text x="51.7481%" y="431.50">core::has..</text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (31 samples, 2.90%)</title><rect x="55.2434%" y="405" width="2.9026%" height="15" fill="rgb(206,74,20)" fg:x="590" fg:w="31"/><text x="55.4934%" y="415.50">co..</text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (30 samples, 2.81%)</title><rect x="55.3371%" y="389" width="2.8090%" height="15" fill="rgb(230,138,44)" fg:x="591" fg:w="30"/><text x="55.5871%" y="399.50">&lt;s..</text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (30 samples, 2.81%)</title><rect x="55.3371%" y="373" width="2.8090%" height="15" fill="rgb(235,182,43)" fg:x="591" fg:w="30"/><text x="55.5871%" y="383.50">&lt;c..</text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (30 samples, 2.81%)</title><rect x="55.3371%" y="357" width="2.8090%" height="15" fill="rgb(242,16,51)" fg:x="591" fg:w="30"/><text x="55.5871%" y="367.50">&lt;c..</text></g><g><title>core::hash::sip::u8to64_le (15 samples, 1.40%)</title><rect x="56.7416%" y="341" width="1.4045%" height="15" fill="rgb(248,9,4)" fg:x="606" fg:w="15"/><text x="56.9916%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (5 samples, 0.47%)</title><rect x="57.6779%" y="325" width="0.4682%" height="15" fill="rgb(210,31,22)" fg:x="616" fg:w="5"/><text x="57.9279%" y="335.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (6 samples, 0.56%)</title><rect x="58.9888%" y="453" width="0.5618%" height="15" fill="rgb(239,54,39)" fg:x="630" fg:w="6"/><text x="59.2388%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (6 samples, 0.56%)</title><rect x="58.9888%" y="437" width="0.5618%" height="15" fill="rgb(230,99,41)" fg:x="630" fg:w="6"/><text x="59.2388%" y="447.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.09%)</title><rect x="60.5805%" y="437" width="0.0936%" height="15" fill="rgb(253,106,12)" fg:x="647" fg:w="1"/><text x="60.8305%" y="447.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.09%)</title><rect x="60.5805%" y="421" width="0.0936%" height="15" fill="rgb(213,46,41)" fg:x="647" fg:w="1"/><text x="60.8305%" y="431.50"></text></g><g><title>exit_to_user_mode_prepare (1 samples, 0.09%)</title><rect x="60.5805%" y="405" width="0.0936%" height="15" fill="rgb(215,133,35)" fg:x="647" fg:w="1"/><text x="60.8305%" y="415.50"></text></g><g><title>schedule (1 samples, 0.09%)</title><rect x="60.5805%" y="389" width="0.0936%" height="15" fill="rgb(213,28,5)" fg:x="647" fg:w="1"/><text x="60.8305%" y="399.50"></text></g><g><title>__schedule (1 samples, 0.09%)</title><rect x="60.5805%" y="373" width="0.0936%" height="15" fill="rgb(215,77,49)" fg:x="647" fg:w="1"/><text x="60.8305%" y="383.50"></text></g><g><title>pick_next_task_fair (1 samples, 0.09%)</title><rect x="60.5805%" y="357" width="0.0936%" height="15" fill="rgb(248,100,22)" fg:x="647" fg:w="1"/><text x="60.8305%" y="367.50"></text></g><g><title>set_next_entity (1 samples, 0.09%)</title><rect x="60.5805%" y="341" width="0.0936%" height="15" fill="rgb(208,67,9)" fg:x="647" fg:w="1"/><text x="60.8305%" y="351.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::bucket (5 samples, 0.47%)</title><rect x="60.6742%" y="437" width="0.4682%" height="15" fill="rgb(219,133,21)" fg:x="648" fg:w="5"/><text x="60.9242%" y="447.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::from_base_index (5 samples, 0.47%)</title><rect x="60.6742%" y="421" width="0.4682%" height="15" fill="rgb(246,46,29)" fg:x="648" fg:w="5"/><text x="60.9242%" y="431.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::sub (5 samples, 0.47%)</title><rect x="60.6742%" y="405" width="0.4682%" height="15" fill="rgb(246,185,52)" fg:x="648" fg:w="5"/><text x="60.9242%" y="415.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::offset (5 samples, 0.47%)</title><rect x="60.6742%" y="389" width="0.4682%" height="15" fill="rgb(252,136,11)" fg:x="648" fg:w="5"/><text x="60.9242%" y="399.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (178 samples, 16.67%)</title><rect x="59.5506%" y="453" width="16.6667%" height="15" fill="rgb(219,138,53)" fg:x="636" fg:w="178"/><text x="59.8006%" y="463.50">hashbrown::raw::RawTable&lt;T..</text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (161 samples, 15.07%)</title><rect x="61.1423%" y="437" width="15.0749%" height="15" fill="rgb(211,51,23)" fg:x="653" fg:w="161"/><text x="61.3923%" y="447.50">hashbrown::rustc_entry:..</text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (161 samples, 15.07%)</title><rect x="61.1423%" y="421" width="15.0749%" height="15" fill="rgb(247,221,28)" fg:x="653" fg:w="161"/><text x="61.3923%" y="431.50">alloc::vec::partial_eq:..</text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (161 samples, 15.07%)</title><rect x="61.1423%" y="405" width="15.0749%" height="15" fill="rgb(251,222,45)" fg:x="653" fg:w="161"/><text x="61.3923%" y="415.50">core::slice::cmp::&lt;impl..</text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (161 samples, 15.07%)</title><rect x="61.1423%" y="389" width="15.0749%" height="15" fill="rgb(217,162,53)" fg:x="653" fg:w="161"/><text x="61.3923%" y="399.50">&lt;[A] as core::slice::cm..</text></g><g><title>[libc.so.6] (81 samples, 7.58%)</title><rect x="68.6330%" y="373" width="7.5843%" height="15" fill="rgb(229,93,14)" fg:x="733" fg:w="81"/><text x="68.8830%" y="383.50">[libc.so.6]</text></g><g><title>hashbrown::raw::h2 (14 samples, 1.31%)</title><rect x="76.2172%" y="453" width="1.3109%" height="15" fill="rgb(209,67,49)" fg:x="814" fg:w="14"/><text x="76.4672%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (20 samples, 1.87%)</title><rect x="77.5281%" y="453" width="1.8727%" height="15" fill="rgb(213,87,29)" fg:x="828" fg:w="20"/><text x="77.7781%" y="463.50">h..</text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (20 samples, 1.87%)</title><rect x="77.5281%" y="437" width="1.8727%" height="15" fill="rgb(205,151,52)" fg:x="828" fg:w="20"/><text x="77.7781%" y="447.50">c..</text></g><g><title>core::intrinsics::copy_nonoverlapping (20 samples, 1.87%)</title><rect x="77.5281%" y="421" width="1.8727%" height="15" fill="rgb(253,215,39)" fg:x="828" fg:w="20"/><text x="77.7781%" y="431.50">c..</text></g><g><title>hashbrown::raw::sse2::Group::match_byte (10 samples, 0.94%)</title><rect x="79.4007%" y="453" width="0.9363%" height="15" fill="rgb(221,220,41)" fg:x="848" fg:w="10"/><text x="79.6507%" y="463.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (10 samples, 0.94%)</title><rect x="79.4007%" y="437" width="0.9363%" height="15" fill="rgb(218,133,21)" fg:x="848" fg:w="10"/><text x="79.6507%" y="447.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (412 samples, 38.58%)</title><rect x="41.8539%" y="501" width="38.5768%" height="15" fill="rgb(221,193,43)" fg:x="447" fg:w="412"/><text x="42.1039%" y="511.50">hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;..</text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (238 samples, 22.28%)</title><rect x="58.1461%" y="485" width="22.2846%" height="15" fill="rgb(240,128,52)" fg:x="621" fg:w="238"/><text x="58.3961%" y="495.50">hashbrown::raw::RawTable&lt;T,A&gt;::find</text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (233 samples, 21.82%)</title><rect x="58.6142%" y="469" width="21.8165%" height="15" fill="rgb(253,114,12)" fg:x="626" fg:w="233"/><text x="58.8642%" y="479.50">hashbrown::raw::RawTableInner&lt;A&gt;::..</text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.09%)</title><rect x="80.3371%" y="453" width="0.0936%" height="15" fill="rgb(215,223,47)" fg:x="858" fg:w="1"/><text x="80.5871%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.09%)</title><rect x="80.3371%" y="437" width="0.0936%" height="15" fill="rgb(248,225,23)" fg:x="858" fg:w="1"/><text x="80.5871%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.09%)</title><rect x="80.3371%" y="421" width="0.0936%" height="15" fill="rgb(250,108,0)" fg:x="858" fg:w="1"/><text x="80.5871%" y="431.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (430 samples, 40.26%)</title><rect x="41.8539%" y="517" width="40.2622%" height="15" fill="rgb(228,208,7)" fg:x="447" fg:w="430"/><text x="42.1039%" y="527.50">std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry</text></g><g><title>std::collections::hash::map::map_entry (18 samples, 1.69%)</title><rect x="80.4307%" y="501" width="1.6854%" height="15" fill="rgb(244,45,10)" fg:x="859" fg:w="18"/><text x="80.6807%" y="511.50"></text></g><g><title>super_word_counter::swc::mapper::start_mapper_threads::{{closure}} (828 samples, 77.53%)</title><rect x="7.3970%" y="549" width="77.5281%" height="15" fill="rgb(207,125,25)" fg:x="79" fg:w="828"/><text x="7.6470%" y="559.50">super_word_counter::swc::mapper::start_mapper_threads::{{closure}}</text></g><g><title>super_word_counter::swc::mapper::map (828 samples, 77.53%)</title><rect x="7.3970%" y="533" width="77.5281%" height="15" fill="rgb(210,195,18)" fg:x="79" fg:w="828"/><text x="7.6470%" y="543.50">super_word_counter::swc::mapper::map</text></g><g><title>super_word_counter::swc::mapper::get_word_modulus (30 samples, 2.81%)</title><rect x="82.1161%" y="517" width="2.8090%" height="15" fill="rgb(249,80,12)" fg:x="877" fg:w="30"/><text x="82.3661%" y="527.50">su..</text></g><g><title>&lt;std::collections::hash::map::Drain&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.28%)</title><rect x="84.9251%" y="517" width="0.2809%" height="15" fill="rgb(221,65,9)" fg:x="907" fg:w="3"/><text x="85.1751%" y="527.50"></text></g><g><title>&lt;hashbrown::map::Drain&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.28%)</title><rect x="84.9251%" y="501" width="0.2809%" height="15" fill="rgb(235,49,36)" fg:x="907" fg:w="3"/><text x="85.1751%" y="511.50"></text></g><g><title>&lt;hashbrown::raw::RawDrain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (3 samples, 0.28%)</title><rect x="84.9251%" y="485" width="0.2809%" height="15" fill="rgb(225,32,20)" fg:x="907" fg:w="3"/><text x="85.1751%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawIter&lt;T&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="85.1124%" y="469" width="0.0936%" height="15" fill="rgb(215,141,46)" fg:x="909" fg:w="1"/><text x="85.3624%" y="479.50"></text></g><g><title>hashbrown::raw::RawIterRange&lt;T&gt;::next_impl (1 samples, 0.09%)</title><rect x="85.1124%" y="453" width="0.0936%" height="15" fill="rgb(250,160,47)" fg:x="909" fg:w="1"/><text x="85.3624%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_full (1 samples, 0.09%)</title><rect x="85.1124%" y="437" width="0.0936%" height="15" fill="rgb(216,222,40)" fg:x="909" fg:w="1"/><text x="85.3624%" y="447.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::invert (1 samples, 0.09%)</title><rect x="85.1124%" y="421" width="0.0936%" height="15" fill="rgb(234,217,39)" fg:x="909" fg:w="1"/><text x="85.3624%" y="431.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::vec::Vec&lt;u8&gt;,u64&gt;&gt; (2 samples, 0.19%)</title><rect x="85.2060%" y="517" width="0.1873%" height="15" fill="rgb(207,178,40)" fg:x="910" fg:w="2"/><text x="85.4560%" y="527.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8&gt;,u64,std::collections::hash::map::RandomState&gt;&gt; (2 samples, 0.19%)</title><rect x="85.2060%" y="501" width="0.1873%" height="15" fill="rgb(221,136,13)" fg:x="910" fg:w="2"/><text x="85.4560%" y="511.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::vec::Vec&lt;u8&gt;,u64)&gt;&gt; (2 samples, 0.19%)</title><rect x="85.2060%" y="485" width="0.1873%" height="15" fill="rgb(249,199,10)" fg:x="910" fg:w="2"/><text x="85.4560%" y="495.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.19%)</title><rect x="85.2060%" y="469" width="0.1873%" height="15" fill="rgb(249,222,13)" fg:x="910" fg:w="2"/><text x="85.4560%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::free_buckets (2 samples, 0.19%)</title><rect x="85.2060%" y="453" width="0.1873%" height="15" fill="rgb(244,185,38)" fg:x="910" fg:w="2"/><text x="85.4560%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::free_buckets (2 samples, 0.19%)</title><rect x="85.2060%" y="437" width="0.1873%" height="15" fill="rgb(236,202,9)" fg:x="910" fg:w="2"/><text x="85.4560%" y="447.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.19%)</title><rect x="85.2060%" y="421" width="0.1873%" height="15" fill="rgb(250,229,37)" fg:x="910" fg:w="2"/><text x="85.4560%" y="431.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.19%)</title><rect x="85.2060%" y="405" width="0.1873%" height="15" fill="rgb(206,174,23)" fg:x="910" fg:w="2"/><text x="85.4560%" y="415.50"></text></g><g><title>cfree (2 samples, 0.19%)</title><rect x="85.2060%" y="389" width="0.1873%" height="15" fill="rgb(211,33,43)" fg:x="910" fg:w="2"/><text x="85.4560%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.19%)</title><rect x="85.2060%" y="373" width="0.1873%" height="15" fill="rgb(245,58,50)" fg:x="910" fg:w="2"/><text x="85.4560%" y="383.50"></text></g><g><title>[libc.so.6] (2 samples, 0.19%)</title><rect x="85.2060%" y="357" width="0.1873%" height="15" fill="rgb(244,68,36)" fg:x="910" fg:w="2"/><text x="85.4560%" y="367.50"></text></g><g><title>std::collections::hash::map::Entry&lt;K,V&gt;::or_insert (8 samples, 0.75%)</title><rect x="85.3933%" y="517" width="0.7491%" height="15" fill="rgb(232,229,15)" fg:x="912" fg:w="8"/><text x="85.6433%" y="527.50"></text></g><g><title>std::collections::hash::map::OccupiedEntry&lt;K,V&gt;::into_mut (8 samples, 0.75%)</title><rect x="85.3933%" y="501" width="0.7491%" height="15" fill="rgb(254,30,23)" fg:x="912" fg:w="8"/><text x="85.6433%" y="511.50"></text></g><g><title>hashbrown::rustc_entry::RustcOccupiedEntry&lt;K,V,A&gt;::into_mut (8 samples, 0.75%)</title><rect x="85.3933%" y="485" width="0.7491%" height="15" fill="rgb(235,160,14)" fg:x="912" fg:w="8"/><text x="85.6433%" y="495.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::rustc_entry::RustcOccupiedEntry&lt;alloc::vec::Vec&lt;u8&gt;,u64&gt;&gt; (8 samples, 0.75%)</title><rect x="85.3933%" y="469" width="0.7491%" height="15" fill="rgb(212,155,44)" fg:x="912" fg:w="8"/><text x="85.6433%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;core::option::Option&lt;alloc::vec::Vec&lt;u8&gt;&gt;&gt; (8 samples, 0.75%)</title><rect x="85.3933%" y="453" width="0.7491%" height="15" fill="rgb(226,2,50)" fg:x="912" fg:w="8"/><text x="85.6433%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (8 samples, 0.75%)</title><rect x="85.3933%" y="437" width="0.7491%" height="15" fill="rgb(234,177,6)" fg:x="912" fg:w="8"/><text x="85.6433%" y="447.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (8 samples, 0.75%)</title><rect x="85.3933%" y="421" width="0.7491%" height="15" fill="rgb(217,24,9)" fg:x="912" fg:w="8"/><text x="85.6433%" y="431.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (8 samples, 0.75%)</title><rect x="85.3933%" y="405" width="0.7491%" height="15" fill="rgb(220,13,46)" fg:x="912" fg:w="8"/><text x="85.6433%" y="415.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (8 samples, 0.75%)</title><rect x="85.3933%" y="389" width="0.7491%" height="15" fill="rgb(239,221,27)" fg:x="912" fg:w="8"/><text x="85.6433%" y="399.50"></text></g><g><title>alloc::alloc::dealloc (8 samples, 0.75%)</title><rect x="85.3933%" y="373" width="0.7491%" height="15" fill="rgb(222,198,25)" fg:x="912" fg:w="8"/><text x="85.6433%" y="383.50"></text></g><g><title>cfree (8 samples, 0.75%)</title><rect x="85.3933%" y="357" width="0.7491%" height="15" fill="rgb(211,99,13)" fg:x="912" fg:w="8"/><text x="85.6433%" y="367.50"></text></g><g><title>[libc.so.6] (5 samples, 0.47%)</title><rect x="85.6742%" y="341" width="0.4682%" height="15" fill="rgb(232,111,31)" fg:x="915" fg:w="5"/><text x="85.9242%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.09%)</title><rect x="86.2360%" y="405" width="0.0936%" height="15" fill="rgb(245,82,37)" fg:x="921" fg:w="1"/><text x="86.4860%" y="415.50"></text></g><g><title>asm_exc_page_fault (1 samples, 0.09%)</title><rect x="86.2360%" y="389" width="0.0936%" height="15" fill="rgb(227,149,46)" fg:x="921" fg:w="1"/><text x="86.4860%" y="399.50"></text></g><g><title>irqentry_exit_to_user_mode (1 samples, 0.09%)</title><rect x="86.2360%" y="373" width="0.0936%" height="15" fill="rgb(218,36,50)" fg:x="921" fg:w="1"/><text x="86.4860%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (1 samples, 0.09%)</title><rect x="86.3296%" y="405" width="0.0936%" height="15" fill="rgb(226,80,48)" fg:x="922" fg:w="1"/><text x="86.5796%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (1 samples, 0.09%)</title><rect x="86.3296%" y="389" width="0.0936%" height="15" fill="rgb(238,224,15)" fg:x="922" fg:w="1"/><text x="86.5796%" y="399.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.09%)</title><rect x="86.3296%" y="373" width="0.0936%" height="15" fill="rgb(241,136,10)" fg:x="922" fg:w="1"/><text x="86.5796%" y="383.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::reserve (4 samples, 0.37%)</title><rect x="86.2360%" y="485" width="0.3745%" height="15" fill="rgb(208,32,45)" fg:x="921" fg:w="4"/><text x="86.4860%" y="495.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (4 samples, 0.37%)</title><rect x="86.2360%" y="469" width="0.3745%" height="15" fill="rgb(207,135,9)" fg:x="921" fg:w="4"/><text x="86.4860%" y="479.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (4 samples, 0.37%)</title><rect x="86.2360%" y="453" width="0.3745%" height="15" fill="rgb(206,86,44)" fg:x="921" fg:w="4"/><text x="86.4860%" y="463.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (4 samples, 0.37%)</title><rect x="86.2360%" y="437" width="0.3745%" height="15" fill="rgb(245,177,15)" fg:x="921" fg:w="4"/><text x="86.4860%" y="447.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (4 samples, 0.37%)</title><rect x="86.2360%" y="421" width="0.3745%" height="15" fill="rgb(206,64,50)" fg:x="921" fg:w="4"/><text x="86.4860%" y="431.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_resize (2 samples, 0.19%)</title><rect x="86.4232%" y="405" width="0.1873%" height="15" fill="rgb(234,36,40)" fg:x="923" fg:w="2"/><text x="86.6732%" y="415.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::fallible_with_capacity (2 samples, 0.19%)</title><rect x="86.4232%" y="389" width="0.1873%" height="15" fill="rgb(213,64,8)" fg:x="923" fg:w="2"/><text x="86.6732%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::new_uninitialized (2 samples, 0.19%)</title><rect x="86.4232%" y="373" width="0.1873%" height="15" fill="rgb(210,75,36)" fg:x="923" fg:w="2"/><text x="86.6732%" y="383.50"></text></g><g><title>hashbrown::raw::alloc::inner::do_alloc (2 samples, 0.19%)</title><rect x="86.4232%" y="357" width="0.1873%" height="15" fill="rgb(229,88,21)" fg:x="923" fg:w="2"/><text x="86.6732%" y="367.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::allocate (2 samples, 0.19%)</title><rect x="86.4232%" y="341" width="0.1873%" height="15" fill="rgb(252,204,47)" fg:x="923" fg:w="2"/><text x="86.6732%" y="351.50"></text></g><g><title>alloc::alloc::Global::alloc_impl (2 samples, 0.19%)</title><rect x="86.4232%" y="325" width="0.1873%" height="15" fill="rgb(208,77,27)" fg:x="923" fg:w="2"/><text x="86.6732%" y="335.50"></text></g><g><title>alloc::alloc::alloc (2 samples, 0.19%)</title><rect x="86.4232%" y="309" width="0.1873%" height="15" fill="rgb(221,76,26)" fg:x="923" fg:w="2"/><text x="86.6732%" y="319.50"></text></g><g><title>malloc (2 samples, 0.19%)</title><rect x="86.4232%" y="293" width="0.1873%" height="15" fill="rgb(225,139,18)" fg:x="923" fg:w="2"/><text x="86.6732%" y="303.50"></text></g><g><title>[libc.so.6] (2 samples, 0.19%)</title><rect x="86.4232%" y="277" width="0.1873%" height="15" fill="rgb(230,137,11)" fg:x="923" fg:w="2"/><text x="86.6732%" y="287.50"></text></g><g><title>[libc.so.6] (2 samples, 0.19%)</title><rect x="86.4232%" y="261" width="0.1873%" height="15" fill="rgb(212,28,1)" fg:x="923" fg:w="2"/><text x="86.6732%" y="271.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.19%)</title><rect x="86.7041%" y="341" width="0.1873%" height="15" fill="rgb(248,164,17)" fg:x="926" fg:w="2"/><text x="86.9541%" y="351.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.19%)</title><rect x="86.7041%" y="325" width="0.1873%" height="15" fill="rgb(222,171,42)" fg:x="926" fg:w="2"/><text x="86.9541%" y="335.50"></text></g><g><title>hashbrown::map::make_insert_hash (4 samples, 0.37%)</title><rect x="86.6105%" y="485" width="0.3745%" height="15" fill="rgb(243,84,45)" fg:x="925" fg:w="4"/><text x="86.8605%" y="495.50"></text></g><g><title>core::hash::BuildHasher::hash_one (4 samples, 0.37%)</title><rect x="86.6105%" y="469" width="0.3745%" height="15" fill="rgb(252,49,23)" fg:x="925" fg:w="4"/><text x="86.8605%" y="479.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (4 samples, 0.37%)</title><rect x="86.6105%" y="453" width="0.3745%" height="15" fill="rgb(215,19,7)" fg:x="925" fg:w="4"/><text x="86.8605%" y="463.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (4 samples, 0.37%)</title><rect x="86.6105%" y="437" width="0.3745%" height="15" fill="rgb(238,81,41)" fg:x="925" fg:w="4"/><text x="86.8605%" y="447.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (4 samples, 0.37%)</title><rect x="86.6105%" y="421" width="0.3745%" height="15" fill="rgb(210,199,37)" fg:x="925" fg:w="4"/><text x="86.8605%" y="431.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (4 samples, 0.37%)</title><rect x="86.6105%" y="405" width="0.3745%" height="15" fill="rgb(244,192,49)" fg:x="925" fg:w="4"/><text x="86.8605%" y="415.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (4 samples, 0.37%)</title><rect x="86.6105%" y="389" width="0.3745%" height="15" fill="rgb(226,211,11)" fg:x="925" fg:w="4"/><text x="86.8605%" y="399.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (4 samples, 0.37%)</title><rect x="86.6105%" y="373" width="0.3745%" height="15" fill="rgb(236,162,54)" fg:x="925" fg:w="4"/><text x="86.8605%" y="383.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (4 samples, 0.37%)</title><rect x="86.6105%" y="357" width="0.3745%" height="15" fill="rgb(220,229,9)" fg:x="925" fg:w="4"/><text x="86.8605%" y="367.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.09%)</title><rect x="86.8914%" y="341" width="0.0936%" height="15" fill="rgb(250,87,22)" fg:x="928" fg:w="1"/><text x="87.1414%" y="351.50"></text></g><g><title>&lt;hashbrown::raw::bitmask::BitMaskIter as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="86.9850%" y="453" width="0.0936%" height="15" fill="rgb(239,43,17)" fg:x="929" fg:w="1"/><text x="87.2350%" y="463.50"></text></g><g><title>hashbrown::raw::bitmask::BitMask::lowest_set_bit (1 samples, 0.09%)</title><rect x="86.9850%" y="437" width="0.0936%" height="15" fill="rgb(231,177,25)" fg:x="929" fg:w="1"/><text x="87.2350%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (4 samples, 0.37%)</title><rect x="87.0787%" y="453" width="0.3745%" height="15" fill="rgb(219,179,1)" fg:x="930" fg:w="4"/><text x="87.3287%" y="463.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (4 samples, 0.37%)</title><rect x="87.0787%" y="437" width="0.3745%" height="15" fill="rgb(238,219,53)" fg:x="930" fg:w="4"/><text x="87.3287%" y="447.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (4 samples, 0.37%)</title><rect x="87.0787%" y="421" width="0.3745%" height="15" fill="rgb(232,167,36)" fg:x="930" fg:w="4"/><text x="87.3287%" y="431.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (4 samples, 0.37%)</title><rect x="87.0787%" y="405" width="0.3745%" height="15" fill="rgb(244,19,51)" fg:x="930" fg:w="4"/><text x="87.3287%" y="415.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (4 samples, 0.37%)</title><rect x="87.0787%" y="389" width="0.3745%" height="15" fill="rgb(224,6,22)" fg:x="930" fg:w="4"/><text x="87.3287%" y="399.50"></text></g><g><title>[libc.so.6] (2 samples, 0.19%)</title><rect x="87.2659%" y="373" width="0.1873%" height="15" fill="rgb(224,145,5)" fg:x="932" fg:w="2"/><text x="87.5159%" y="383.50"></text></g><g><title>std::sys::unix::thread::Thread::new::thread_start (856 samples, 80.15%)</title><rect x="7.3970%" y="725" width="80.1498%" height="15" fill="rgb(234,130,49)" fg:x="79" fg:w="856"/><text x="7.6470%" y="735.50">std::sys::unix::thread::Thread::new::thread_start</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (856 samples, 80.15%)</title><rect x="7.3970%" y="709" width="80.1498%" height="15" fill="rgb(254,6,2)" fg:x="79" fg:w="856"/><text x="7.6470%" y="719.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once (856 samples, 80.15%)</title><rect x="7.3970%" y="693" width="80.1498%" height="15" fill="rgb(208,96,46)" fg:x="79" fg:w="856"/><text x="7.6470%" y="703.50">&lt;alloc::boxed::Box&lt;F,A&gt; as core::ops::function::FnOnce&lt;Args&gt;&gt;::call_once</text></g><g><title>core::ops::function::FnOnce::call_once{{vtable.shim}} (856 samples, 80.15%)</title><rect x="7.3970%" y="677" width="80.1498%" height="15" fill="rgb(239,3,39)" fg:x="79" fg:w="856"/><text x="7.6470%" y="687.50">core::ops::function::FnOnce::call_once{{vtable.shim}}</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}} (856 samples, 80.15%)</title><rect x="7.3970%" y="661" width="80.1498%" height="15" fill="rgb(233,210,1)" fg:x="79" fg:w="856"/><text x="7.6470%" y="671.50">std::thread::Builder::spawn_unchecked_::{{closure}}</text></g><g><title>std::panic::catch_unwind (856 samples, 80.15%)</title><rect x="7.3970%" y="645" width="80.1498%" height="15" fill="rgb(244,137,37)" fg:x="79" fg:w="856"/><text x="7.6470%" y="655.50">std::panic::catch_unwind</text></g><g><title>std::panicking::try (856 samples, 80.15%)</title><rect x="7.3970%" y="629" width="80.1498%" height="15" fill="rgb(240,136,2)" fg:x="79" fg:w="856"/><text x="7.6470%" y="639.50">std::panicking::try</text></g><g><title>std::panicking::try::do_call (856 samples, 80.15%)</title><rect x="7.3970%" y="613" width="80.1498%" height="15" fill="rgb(239,18,37)" fg:x="79" fg:w="856"/><text x="7.6470%" y="623.50">std::panicking::try::do_call</text></g><g><title>&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once (856 samples, 80.15%)</title><rect x="7.3970%" y="597" width="80.1498%" height="15" fill="rgb(218,185,22)" fg:x="79" fg:w="856"/><text x="7.6470%" y="607.50">&lt;core::panic::unwind_safe::AssertUnwindSafe&lt;F&gt; as core::ops::function::FnOnce&lt;()&gt;&gt;::call_once</text></g><g><title>std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}} (856 samples, 80.15%)</title><rect x="7.3970%" y="581" width="80.1498%" height="15" fill="rgb(225,218,4)" fg:x="79" fg:w="856"/><text x="7.6470%" y="591.50">std::thread::Builder::spawn_unchecked_::{{closure}}::{{closure}}</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (856 samples, 80.15%)</title><rect x="7.3970%" y="565" width="80.1498%" height="15" fill="rgb(230,182,32)" fg:x="79" fg:w="856"/><text x="7.6470%" y="575.50">std::sys_common::backtrace::__rust_begin_short_backtrace</text></g><g><title>super_word_counter::swc::reducer::launch_reducer_threads::{{closure}} (28 samples, 2.62%)</title><rect x="84.9251%" y="549" width="2.6217%" height="15" fill="rgb(242,56,43)" fg:x="907" fg:w="28"/><text x="85.1751%" y="559.50">su..</text></g><g><title>super_word_counter::swc::reducer::reduce (28 samples, 2.62%)</title><rect x="84.9251%" y="533" width="2.6217%" height="15" fill="rgb(233,99,24)" fg:x="907" fg:w="28"/><text x="85.1751%" y="543.50">su..</text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (15 samples, 1.40%)</title><rect x="86.1423%" y="517" width="1.4045%" height="15" fill="rgb(234,209,42)" fg:x="920" fg:w="15"/><text x="86.3923%" y="527.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (15 samples, 1.40%)</title><rect x="86.1423%" y="501" width="1.4045%" height="15" fill="rgb(227,7,12)" fg:x="920" fg:w="15"/><text x="86.3923%" y="511.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (6 samples, 0.56%)</title><rect x="86.9850%" y="485" width="0.5618%" height="15" fill="rgb(245,203,43)" fg:x="929" fg:w="6"/><text x="87.2350%" y="495.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (6 samples, 0.56%)</title><rect x="86.9850%" y="469" width="0.5618%" height="15" fill="rgb(238,205,33)" fg:x="929" fg:w="6"/><text x="87.2350%" y="479.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_empty (1 samples, 0.09%)</title><rect x="87.4532%" y="453" width="0.0936%" height="15" fill="rgb(231,56,7)" fg:x="934" fg:w="1"/><text x="87.7032%" y="463.50"></text></g><g><title>hashbrown::raw::sse2::Group::match_byte (1 samples, 0.09%)</title><rect x="87.4532%" y="437" width="0.0936%" height="15" fill="rgb(244,186,29)" fg:x="934" fg:w="1"/><text x="87.7032%" y="447.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_movemask_epi8 (1 samples, 0.09%)</title><rect x="87.4532%" y="421" width="0.0936%" height="15" fill="rgb(234,111,31)" fg:x="934" fg:w="1"/><text x="87.7032%" y="431.50"></text></g><g><title>[libc.so.6] (861 samples, 80.62%)</title><rect x="7.0225%" y="741" width="80.6180%" height="15" fill="rgb(241,149,10)" fg:x="75" fg:w="861"/><text x="7.2725%" y="751.50">[libc.so.6]</text></g><g><title>syscall_return_via_sysret (1 samples, 0.09%)</title><rect x="87.5468%" y="725" width="0.0936%" height="15" fill="rgb(249,206,44)" fg:x="935" fg:w="1"/><text x="87.7968%" y="735.50"></text></g><g><title>entry_SYSCALL_64 (1 samples, 0.09%)</title><rect x="87.6404%" y="741" width="0.0936%" height="15" fill="rgb(251,153,30)" fg:x="936" fg:w="1"/><text x="87.8904%" y="751.50"></text></g><g><title>[libc.so.6] (863 samples, 80.81%)</title><rect x="7.0225%" y="757" width="80.8052%" height="15" fill="rgb(239,152,38)" fg:x="75" fg:w="863"/><text x="7.2725%" y="767.50">[libc.so.6]</text></g><g><title>entry_SYSCALL_64_after_hwframe (1 samples, 0.09%)</title><rect x="87.7341%" y="741" width="0.0936%" height="15" fill="rgb(249,139,47)" fg:x="937" fg:w="1"/><text x="87.9841%" y="751.50"></text></g><g><title>do_syscall_64 (1 samples, 0.09%)</title><rect x="87.7341%" y="725" width="0.0936%" height="15" fill="rgb(244,64,35)" fg:x="937" fg:w="1"/><text x="87.9841%" y="735.50"></text></g><g><title>__do_sys_clone3 (1 samples, 0.09%)</title><rect x="87.7341%" y="709" width="0.0936%" height="15" fill="rgb(216,46,15)" fg:x="937" fg:w="1"/><text x="87.9841%" y="719.50"></text></g><g><title>kernel_clone (1 samples, 0.09%)</title><rect x="87.7341%" y="693" width="0.0936%" height="15" fill="rgb(250,74,19)" fg:x="937" fg:w="1"/><text x="87.9841%" y="703.50"></text></g><g><title>copy_process (1 samples, 0.09%)</title><rect x="87.7341%" y="677" width="0.0936%" height="15" fill="rgb(249,42,33)" fg:x="937" fg:w="1"/><text x="87.9841%" y="687.50"></text></g><g><title>perf_event_init_task (1 samples, 0.09%)</title><rect x="87.7341%" y="661" width="0.0936%" height="15" fill="rgb(242,149,17)" fg:x="937" fg:w="1"/><text x="87.9841%" y="671.50"></text></g><g><title>inherit_task_group.isra.0 (1 samples, 0.09%)</title><rect x="87.7341%" y="645" width="0.0936%" height="15" fill="rgb(244,29,21)" fg:x="937" fg:w="1"/><text x="87.9841%" y="655.50"></text></g><g><title>inherit_event.constprop.0 (1 samples, 0.09%)</title><rect x="87.7341%" y="629" width="0.0936%" height="15" fill="rgb(220,130,37)" fg:x="937" fg:w="1"/><text x="87.9841%" y="639.50"></text></g><g><title>perf_event_alloc (1 samples, 0.09%)</title><rect x="87.7341%" y="613" width="0.0936%" height="15" fill="rgb(211,67,2)" fg:x="937" fg:w="1"/><text x="87.9841%" y="623.50"></text></g><g><title>__srcu_read_lock (1 samples, 0.09%)</title><rect x="87.7341%" y="597" width="0.0936%" height="15" fill="rgb(235,68,52)" fg:x="937" fg:w="1"/><text x="87.9841%" y="607.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (8 samples, 0.75%)</title><rect x="87.8277%" y="741" width="0.7491%" height="15" fill="rgb(246,142,3)" fg:x="938" fg:w="8"/><text x="88.0777%" y="751.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (8 samples, 0.75%)</title><rect x="87.8277%" y="725" width="0.7491%" height="15" fill="rgb(241,25,7)" fg:x="938" fg:w="8"/><text x="88.0777%" y="735.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (8 samples, 0.75%)</title><rect x="87.8277%" y="709" width="0.7491%" height="15" fill="rgb(242,119,39)" fg:x="938" fg:w="8"/><text x="88.0777%" y="719.50"></text></g><g><title>[libc.so.6] (4 samples, 0.37%)</title><rect x="88.5768%" y="741" width="0.3745%" height="15" fill="rgb(241,98,45)" fg:x="946" fg:w="4"/><text x="88.8268%" y="751.50"></text></g><g><title>__mprotect (1 samples, 0.09%)</title><rect x="88.8577%" y="725" width="0.0936%" height="15" fill="rgb(254,28,30)" fg:x="949" fg:w="1"/><text x="89.1077%" y="735.50"></text></g><g><title>error_entry (1 samples, 0.09%)</title><rect x="88.8577%" y="709" width="0.0936%" height="15" fill="rgb(241,142,54)" fg:x="949" fg:w="1"/><text x="89.1077%" y="719.50"></text></g><g><title>__rdl_alloc (2 samples, 0.19%)</title><rect x="88.9513%" y="741" width="0.1873%" height="15" fill="rgb(222,85,15)" fg:x="950" fg:w="2"/><text x="89.2013%" y="751.50"></text></g><g><title>std::sys::unix::alloc::&lt;impl core::alloc::global::GlobalAlloc for std::alloc::System&gt;::alloc (1 samples, 0.09%)</title><rect x="89.0449%" y="725" width="0.0936%" height="15" fill="rgb(210,85,47)" fg:x="951" fg:w="1"/><text x="89.2949%" y="735.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::reserve_for_push (13 samples, 1.22%)</title><rect x="89.1386%" y="741" width="1.2172%" height="15" fill="rgb(224,206,25)" fg:x="952" fg:w="13"/><text x="89.3886%" y="751.50"></text></g><g><title>alloc::raw_vec::RawVec&lt;T,A&gt;::grow_amortized (13 samples, 1.22%)</title><rect x="89.1386%" y="725" width="1.2172%" height="15" fill="rgb(243,201,19)" fg:x="952" fg:w="13"/><text x="89.3886%" y="735.50"></text></g><g><title>core::num::&lt;impl usize&gt;::checked_add (12 samples, 1.12%)</title><rect x="89.2322%" y="709" width="1.1236%" height="15" fill="rgb(236,59,4)" fg:x="953" fg:w="12"/><text x="89.4822%" y="719.50"></text></g><g><title>core::num::&lt;impl usize&gt;::overflowing_add (12 samples, 1.12%)</title><rect x="89.2322%" y="693" width="1.1236%" height="15" fill="rgb(254,179,45)" fg:x="953" fg:w="12"/><text x="89.4822%" y="703.50"></text></g><g><title>core::hash::BuildHasher::hash_one (8 samples, 0.75%)</title><rect x="90.3558%" y="741" width="0.7491%" height="15" fill="rgb(226,14,10)" fg:x="965" fg:w="8"/><text x="90.6058%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (1 samples, 0.09%)</title><rect x="91.1049%" y="741" width="0.0936%" height="15" fill="rgb(244,27,41)" fg:x="973" fg:w="1"/><text x="91.3549%" y="751.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (1 samples, 0.09%)</title><rect x="91.1049%" y="725" width="0.0936%" height="15" fill="rgb(235,35,32)" fg:x="973" fg:w="1"/><text x="91.3549%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (1 samples, 0.09%)</title><rect x="91.1049%" y="709" width="0.0936%" height="15" fill="rgb(218,68,31)" fg:x="973" fg:w="1"/><text x="91.3549%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.09%)</title><rect x="91.1049%" y="693" width="0.0936%" height="15" fill="rgb(207,120,37)" fg:x="973" fg:w="1"/><text x="91.3549%" y="703.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.09%)</title><rect x="91.1049%" y="677" width="0.0936%" height="15" fill="rgb(227,98,0)" fg:x="973" fg:w="1"/><text x="91.3549%" y="687.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.09%)</title><rect x="91.1049%" y="661" width="0.0936%" height="15" fill="rgb(207,7,3)" fg:x="973" fg:w="1"/><text x="91.3549%" y="671.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry (8 samples, 0.75%)</title><rect x="91.1985%" y="741" width="0.7491%" height="15" fill="rgb(206,98,19)" fg:x="974" fg:w="8"/><text x="91.4485%" y="751.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find (1 samples, 0.09%)</title><rect x="91.8539%" y="725" width="0.0936%" height="15" fill="rgb(217,5,26)" fg:x="981" fg:w="1"/><text x="92.1039%" y="735.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_inner (1 samples, 0.09%)</title><rect x="91.8539%" y="709" width="0.0936%" height="15" fill="rgb(235,190,38)" fg:x="981" fg:w="1"/><text x="92.1039%" y="719.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::find::{{closure}} (1 samples, 0.09%)</title><rect x="91.8539%" y="693" width="0.0936%" height="15" fill="rgb(247,86,24)" fg:x="981" fg:w="1"/><text x="92.1039%" y="703.50"></text></g><g><title>hashbrown::rustc_entry::&lt;impl hashbrown::map::HashMap&lt;K,V,S,A&gt;&gt;::rustc_entry::{{closure}} (1 samples, 0.09%)</title><rect x="91.8539%" y="677" width="0.0936%" height="15" fill="rgb(205,101,16)" fg:x="981" fg:w="1"/><text x="92.1039%" y="687.50"></text></g><g><title>alloc::vec::partial_eq::&lt;impl core::cmp::PartialEq&lt;alloc::vec::Vec&lt;U,A2&gt;&gt; for alloc::vec::Vec&lt;T,A1&gt;&gt;::eq (1 samples, 0.09%)</title><rect x="91.8539%" y="661" width="0.0936%" height="15" fill="rgb(246,168,33)" fg:x="981" fg:w="1"/><text x="92.1039%" y="671.50"></text></g><g><title>core::slice::cmp::&lt;impl core::cmp::PartialEq&lt;[B]&gt; for [A]&gt;::eq (1 samples, 0.09%)</title><rect x="91.8539%" y="645" width="0.0936%" height="15" fill="rgb(231,114,1)" fg:x="981" fg:w="1"/><text x="92.1039%" y="655.50"></text></g><g><title>&lt;[A] as core::slice::cmp::SlicePartialEq&lt;B&gt;&gt;::equal (1 samples, 0.09%)</title><rect x="91.8539%" y="629" width="0.0936%" height="15" fill="rgb(207,184,53)" fg:x="981" fg:w="1"/><text x="92.1039%" y="639.50"></text></g><g><title>malloc (4 samples, 0.37%)</title><rect x="91.9476%" y="741" width="0.3745%" height="15" fill="rgb(224,95,51)" fg:x="982" fg:w="4"/><text x="92.1976%" y="751.50"></text></g><g><title>realloc (2 samples, 0.19%)</title><rect x="92.3221%" y="741" width="0.1873%" height="15" fill="rgb(212,188,45)" fg:x="986" fg:w="2"/><text x="92.5721%" y="751.50"></text></g><g><title>alloc::vec::Vec&lt;T,A&gt;::push (2 samples, 0.19%)</title><rect x="92.5094%" y="725" width="0.1873%" height="15" fill="rgb(223,154,38)" fg:x="988" fg:w="2"/><text x="92.7594%" y="735.50"></text></g><g><title>[unknown] (55 samples, 5.15%)</title><rect x="87.8277%" y="757" width="5.1498%" height="15" fill="rgb(251,22,52)" fg:x="938" fg:w="55"/><text x="88.0777%" y="767.50">[unkno..</text></g><g><title>super_word_counter::swc::mapper::map (5 samples, 0.47%)</title><rect x="92.5094%" y="741" width="0.4682%" height="15" fill="rgb(229,209,22)" fg:x="988" fg:w="5"/><text x="92.7594%" y="751.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::entry (3 samples, 0.28%)</title><rect x="92.6966%" y="725" width="0.2809%" height="15" fill="rgb(234,138,34)" fg:x="990" fg:w="3"/><text x="92.9466%" y="735.50"></text></g><g><title>core::ptr::drop_in_place&lt;std::collections::hash::map::HashMap&lt;alloc::vec::Vec&lt;u8&gt;,u64&gt;&gt; (2 samples, 0.19%)</title><rect x="92.9775%" y="469" width="0.1873%" height="15" fill="rgb(212,95,11)" fg:x="993" fg:w="2"/><text x="93.2275%" y="479.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::map::HashMap&lt;alloc::vec::Vec&lt;u8&gt;,u64,std::collections::hash::map::RandomState&gt;&gt; (2 samples, 0.19%)</title><rect x="92.9775%" y="453" width="0.1873%" height="15" fill="rgb(240,179,47)" fg:x="993" fg:w="2"/><text x="93.2275%" y="463.50"></text></g><g><title>core::ptr::drop_in_place&lt;hashbrown::raw::RawTable&lt;(alloc::vec::Vec&lt;u8&gt;,u64)&gt;&gt; (2 samples, 0.19%)</title><rect x="92.9775%" y="437" width="0.1873%" height="15" fill="rgb(240,163,11)" fg:x="993" fg:w="2"/><text x="93.2275%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawTable&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.19%)</title><rect x="92.9775%" y="421" width="0.1873%" height="15" fill="rgb(236,37,12)" fg:x="993" fg:w="2"/><text x="93.2275%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::drop_elements (2 samples, 0.19%)</title><rect x="92.9775%" y="405" width="0.1873%" height="15" fill="rgb(232,164,16)" fg:x="993" fg:w="2"/><text x="93.2275%" y="415.50"></text></g><g><title>hashbrown::raw::Bucket&lt;T&gt;::drop (2 samples, 0.19%)</title><rect x="92.9775%" y="389" width="0.1873%" height="15" fill="rgb(244,205,15)" fg:x="993" fg:w="2"/><text x="93.2275%" y="399.50"></text></g><g><title>core::ptr::mut_ptr::&lt;impl *mut T&gt;::drop_in_place (2 samples, 0.19%)</title><rect x="92.9775%" y="373" width="0.1873%" height="15" fill="rgb(223,117,47)" fg:x="993" fg:w="2"/><text x="93.2275%" y="383.50"></text></g><g><title>core::ptr::drop_in_place&lt;(alloc::vec::Vec&lt;u8&gt;,u64)&gt; (2 samples, 0.19%)</title><rect x="92.9775%" y="357" width="0.1873%" height="15" fill="rgb(244,107,35)" fg:x="993" fg:w="2"/><text x="93.2275%" y="367.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::vec::Vec&lt;u8&gt;&gt; (2 samples, 0.19%)</title><rect x="92.9775%" y="341" width="0.1873%" height="15" fill="rgb(205,140,8)" fg:x="993" fg:w="2"/><text x="93.2275%" y="351.50"></text></g><g><title>core::ptr::drop_in_place&lt;alloc::raw_vec::RawVec&lt;u8&gt;&gt; (2 samples, 0.19%)</title><rect x="92.9775%" y="325" width="0.1873%" height="15" fill="rgb(228,84,46)" fg:x="993" fg:w="2"/><text x="93.2275%" y="335.50"></text></g><g><title>&lt;alloc::raw_vec::RawVec&lt;T,A&gt; as core::ops::drop::Drop&gt;::drop (2 samples, 0.19%)</title><rect x="92.9775%" y="309" width="0.1873%" height="15" fill="rgb(254,188,9)" fg:x="993" fg:w="2"/><text x="93.2275%" y="319.50"></text></g><g><title>&lt;alloc::alloc::Global as core::alloc::Allocator&gt;::deallocate (2 samples, 0.19%)</title><rect x="92.9775%" y="293" width="0.1873%" height="15" fill="rgb(206,112,54)" fg:x="993" fg:w="2"/><text x="93.2275%" y="303.50"></text></g><g><title>alloc::alloc::dealloc (2 samples, 0.19%)</title><rect x="92.9775%" y="277" width="0.1873%" height="15" fill="rgb(216,84,49)" fg:x="993" fg:w="2"/><text x="93.2275%" y="287.50"></text></g><g><title>cfree (2 samples, 0.19%)</title><rect x="92.9775%" y="261" width="0.1873%" height="15" fill="rgb(214,194,35)" fg:x="993" fg:w="2"/><text x="93.2275%" y="271.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="93.0712%" y="245" width="0.0936%" height="15" fill="rgb(249,28,3)" fg:x="994" fg:w="1"/><text x="93.3212%" y="255.50"></text></g><g><title>[libc.so.6] (1 samples, 0.09%)</title><rect x="93.1648%" y="373" width="0.0936%" height="15" fill="rgb(222,56,52)" fg:x="995" fg:w="1"/><text x="93.4148%" y="383.50"></text></g><g><title>super_word_counter::swc::mapper::start_mapper_threads (6 samples, 0.56%)</title><rect x="93.1648%" y="469" width="0.5618%" height="15" fill="rgb(245,217,50)" fg:x="995" fg:w="6"/><text x="93.4148%" y="479.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (6 samples, 0.56%)</title><rect x="93.1648%" y="453" width="0.5618%" height="15" fill="rgb(213,201,24)" fg:x="995" fg:w="6"/><text x="93.4148%" y="463.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (6 samples, 0.56%)</title><rect x="93.1648%" y="437" width="0.5618%" height="15" fill="rgb(248,116,28)" fg:x="995" fg:w="6"/><text x="93.4148%" y="447.50"></text></g><g><title>std::sys::unix::thread::Thread::join (6 samples, 0.56%)</title><rect x="93.1648%" y="421" width="0.5618%" height="15" fill="rgb(219,72,43)" fg:x="995" fg:w="6"/><text x="93.4148%" y="431.50"></text></g><g><title>[libc.so.6] (6 samples, 0.56%)</title><rect x="93.1648%" y="405" width="0.5618%" height="15" fill="rgb(209,138,14)" fg:x="995" fg:w="6"/><text x="93.4148%" y="415.50"></text></g><g><title>[libc.so.6] (6 samples, 0.56%)</title><rect x="93.1648%" y="389" width="0.5618%" height="15" fill="rgb(222,18,33)" fg:x="995" fg:w="6"/><text x="93.4148%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.47%)</title><rect x="93.2584%" y="373" width="0.4682%" height="15" fill="rgb(213,199,7)" fg:x="996" fg:w="5"/><text x="93.5084%" y="383.50"></text></g><g><title>do_syscall_64 (5 samples, 0.47%)</title><rect x="93.2584%" y="357" width="0.4682%" height="15" fill="rgb(250,110,10)" fg:x="996" fg:w="5"/><text x="93.5084%" y="367.50"></text></g><g><title>__do_sys_futex (5 samples, 0.47%)</title><rect x="93.2584%" y="341" width="0.4682%" height="15" fill="rgb(248,123,6)" fg:x="996" fg:w="5"/><text x="93.5084%" y="351.50"></text></g><g><title>do_futex (5 samples, 0.47%)</title><rect x="93.2584%" y="325" width="0.4682%" height="15" fill="rgb(206,91,31)" fg:x="996" fg:w="5"/><text x="93.5084%" y="335.50"></text></g><g><title>futex_wait (5 samples, 0.47%)</title><rect x="93.2584%" y="309" width="0.4682%" height="15" fill="rgb(211,154,13)" fg:x="996" fg:w="5"/><text x="93.5084%" y="319.50"></text></g><g><title>futex_wait_queue_me (5 samples, 0.47%)</title><rect x="93.2584%" y="293" width="0.4682%" height="15" fill="rgb(225,148,7)" fg:x="996" fg:w="5"/><text x="93.5084%" y="303.50"></text></g><g><title>schedule (5 samples, 0.47%)</title><rect x="93.2584%" y="277" width="0.4682%" height="15" fill="rgb(220,160,43)" fg:x="996" fg:w="5"/><text x="93.5084%" y="287.50"></text></g><g><title>__schedule (5 samples, 0.47%)</title><rect x="93.2584%" y="261" width="0.4682%" height="15" fill="rgb(213,52,39)" fg:x="996" fg:w="5"/><text x="93.5084%" y="271.50"></text></g><g><title>finish_task_switch (5 samples, 0.47%)</title><rect x="93.2584%" y="245" width="0.4682%" height="15" fill="rgb(243,137,7)" fg:x="996" fg:w="5"/><text x="93.5084%" y="255.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.47%)</title><rect x="93.2584%" y="229" width="0.4682%" height="15" fill="rgb(230,79,13)" fg:x="996" fg:w="5"/><text x="93.5084%" y="239.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.47%)</title><rect x="93.2584%" y="213" width="0.4682%" height="15" fill="rgb(247,105,23)" fg:x="996" fg:w="5"/><text x="93.5084%" y="223.50"></text></g><g><title>native_write_msr (5 samples, 0.47%)</title><rect x="93.2584%" y="197" width="0.4682%" height="15" fill="rgb(223,179,41)" fg:x="996" fg:w="5"/><text x="93.5084%" y="207.50"></text></g><g><title>&lt;std::collections::hash::map::Drain&lt;K,V&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="93.7266%" y="453" width="0.0936%" height="15" fill="rgb(218,9,34)" fg:x="1001" fg:w="1"/><text x="93.9766%" y="463.50"></text></g><g><title>&lt;hashbrown::map::Drain&lt;K,V,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="93.7266%" y="437" width="0.0936%" height="15" fill="rgb(222,106,8)" fg:x="1001" fg:w="1"/><text x="93.9766%" y="447.50"></text></g><g><title>&lt;hashbrown::raw::RawDrain&lt;T,A&gt; as core::iter::traits::iterator::Iterator&gt;::next (1 samples, 0.09%)</title><rect x="93.7266%" y="421" width="0.0936%" height="15" fill="rgb(211,220,0)" fg:x="1001" fg:w="1"/><text x="93.9766%" y="431.50"></text></g><g><title>hashbrown::map::make_insert_hash (2 samples, 0.19%)</title><rect x="93.8202%" y="421" width="0.1873%" height="15" fill="rgb(229,52,16)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="431.50"></text></g><g><title>core::hash::BuildHasher::hash_one (2 samples, 0.19%)</title><rect x="93.8202%" y="405" width="0.1873%" height="15" fill="rgb(212,155,18)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="415.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (2 samples, 0.19%)</title><rect x="93.8202%" y="389" width="0.1873%" height="15" fill="rgb(242,21,14)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="399.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (2 samples, 0.19%)</title><rect x="93.8202%" y="373" width="0.1873%" height="15" fill="rgb(222,19,48)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="383.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (2 samples, 0.19%)</title><rect x="93.8202%" y="357" width="0.1873%" height="15" fill="rgb(232,45,27)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="367.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (2 samples, 0.19%)</title><rect x="93.8202%" y="341" width="0.1873%" height="15" fill="rgb(249,103,42)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="351.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (2 samples, 0.19%)</title><rect x="93.8202%" y="325" width="0.1873%" height="15" fill="rgb(246,81,33)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="335.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (2 samples, 0.19%)</title><rect x="93.8202%" y="309" width="0.1873%" height="15" fill="rgb(252,33,42)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="319.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (2 samples, 0.19%)</title><rect x="93.8202%" y="293" width="0.1873%" height="15" fill="rgb(209,212,41)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="303.50"></text></g><g><title>core::hash::sip::u8to64_le (2 samples, 0.19%)</title><rect x="93.8202%" y="277" width="0.1873%" height="15" fill="rgb(207,154,6)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="287.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.19%)</title><rect x="93.8202%" y="261" width="0.1873%" height="15" fill="rgb(223,64,47)" fg:x="1002" fg:w="2"/><text x="94.0702%" y="271.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.09%)</title><rect x="94.0075%" y="261" width="0.0936%" height="15" fill="rgb(211,161,38)" fg:x="1004" fg:w="1"/><text x="94.2575%" y="271.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.09%)</title><rect x="94.0075%" y="245" width="0.0936%" height="15" fill="rgb(219,138,40)" fg:x="1004" fg:w="1"/><text x="94.2575%" y="255.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.09%)</title><rect x="94.0075%" y="229" width="0.0936%" height="15" fill="rgb(241,228,46)" fg:x="1004" fg:w="1"/><text x="94.2575%" y="239.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.09%)</title><rect x="94.0075%" y="213" width="0.0936%" height="15" fill="rgb(223,209,38)" fg:x="1004" fg:w="1"/><text x="94.2575%" y="223.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (2 samples, 0.19%)</title><rect x="94.0075%" y="341" width="0.1873%" height="15" fill="rgb(236,164,45)" fg:x="1004" fg:w="2"/><text x="94.2575%" y="351.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.19%)</title><rect x="94.0075%" y="325" width="0.1873%" height="15" fill="rgb(231,15,5)" fg:x="1004" fg:w="2"/><text x="94.2575%" y="335.50"></text></g><g><title>exc_page_fault (2 samples, 0.19%)</title><rect x="94.0075%" y="309" width="0.1873%" height="15" fill="rgb(252,35,15)" fg:x="1004" fg:w="2"/><text x="94.2575%" y="319.50"></text></g><g><title>do_user_addr_fault (2 samples, 0.19%)</title><rect x="94.0075%" y="293" width="0.1873%" height="15" fill="rgb(248,181,18)" fg:x="1004" fg:w="2"/><text x="94.2575%" y="303.50"></text></g><g><title>handle_mm_fault (2 samples, 0.19%)</title><rect x="94.0075%" y="277" width="0.1873%" height="15" fill="rgb(233,39,42)" fg:x="1004" fg:w="2"/><text x="94.2575%" y="287.50"></text></g><g><title>mem_cgroup_charge (1 samples, 0.09%)</title><rect x="94.1011%" y="261" width="0.0936%" height="15" fill="rgb(238,110,33)" fg:x="1005" fg:w="1"/><text x="94.3511%" y="271.50"></text></g><g><title>__rcu_read_unlock (1 samples, 0.09%)</title><rect x="94.1011%" y="245" width="0.0936%" height="15" fill="rgb(233,195,10)" fg:x="1005" fg:w="1"/><text x="94.3511%" y="255.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash::{{closure}} (1 samples, 0.09%)</title><rect x="94.1948%" y="341" width="0.0936%" height="15" fill="rgb(254,105,3)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="351.50"></text></g><g><title>hashbrown::map::make_hasher::{{closure}} (1 samples, 0.09%)</title><rect x="94.1948%" y="325" width="0.0936%" height="15" fill="rgb(221,225,9)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="335.50"></text></g><g><title>hashbrown::map::make_hash (1 samples, 0.09%)</title><rect x="94.1948%" y="309" width="0.0936%" height="15" fill="rgb(224,227,45)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="319.50"></text></g><g><title>core::hash::BuildHasher::hash_one (1 samples, 0.09%)</title><rect x="94.1948%" y="293" width="0.0936%" height="15" fill="rgb(229,198,43)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="303.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for &amp;T&gt;::hash (1 samples, 0.09%)</title><rect x="94.1948%" y="277" width="0.0936%" height="15" fill="rgb(206,209,35)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="287.50"></text></g><g><title>&lt;alloc::vec::Vec&lt;T,A&gt; as core::hash::Hash&gt;::hash (1 samples, 0.09%)</title><rect x="94.1948%" y="261" width="0.0936%" height="15" fill="rgb(245,195,53)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="271.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for [T]&gt;::hash (1 samples, 0.09%)</title><rect x="94.1948%" y="245" width="0.0936%" height="15" fill="rgb(240,92,26)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="255.50"></text></g><g><title>core::hash::impls::&lt;impl core::hash::Hash for u8&gt;::hash_slice (1 samples, 0.09%)</title><rect x="94.1948%" y="229" width="0.0936%" height="15" fill="rgb(207,40,23)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="239.50"></text></g><g><title>&lt;std::collections::hash::map::DefaultHasher as core::hash::Hasher&gt;::write (1 samples, 0.09%)</title><rect x="94.1948%" y="213" width="0.0936%" height="15" fill="rgb(223,111,35)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="223.50"></text></g><g><title>&lt;core::hash::sip::SipHasher13 as core::hash::Hasher&gt;::write (1 samples, 0.09%)</title><rect x="94.1948%" y="197" width="0.0936%" height="15" fill="rgb(229,147,28)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="207.50"></text></g><g><title>&lt;core::hash::sip::Hasher&lt;S&gt; as core::hash::Hasher&gt;::write (1 samples, 0.09%)</title><rect x="94.1948%" y="181" width="0.0936%" height="15" fill="rgb(211,29,28)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="191.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.09%)</title><rect x="94.1948%" y="165" width="0.0936%" height="15" fill="rgb(228,72,33)" fg:x="1006" fg:w="1"/><text x="94.4448%" y="175.50"></text></g><g><title>hashbrown::raw::is_full (1 samples, 0.09%)</title><rect x="94.2884%" y="309" width="0.0936%" height="15" fill="rgb(205,214,31)" fg:x="1007" fg:w="1"/><text x="94.5384%" y="319.50"></text></g><g><title>std::collections::hash::map::HashMap&lt;K,V,S&gt;::insert (7 samples, 0.66%)</title><rect x="93.8202%" y="453" width="0.6554%" height="15" fill="rgb(224,111,15)" fg:x="1002" fg:w="7"/><text x="94.0702%" y="463.50"></text></g><g><title>hashbrown::map::HashMap&lt;K,V,S,A&gt;::insert (7 samples, 0.66%)</title><rect x="93.8202%" y="437" width="0.6554%" height="15" fill="rgb(253,21,26)" fg:x="1002" fg:w="7"/><text x="94.0702%" y="447.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::insert (5 samples, 0.47%)</title><rect x="94.0075%" y="421" width="0.4682%" height="15" fill="rgb(245,139,43)" fg:x="1004" fg:w="5"/><text x="94.2575%" y="431.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve (5 samples, 0.47%)</title><rect x="94.0075%" y="405" width="0.4682%" height="15" fill="rgb(252,170,7)" fg:x="1004" fg:w="5"/><text x="94.2575%" y="415.50"></text></g><g><title>hashbrown::raw::RawTable&lt;T,A&gt;::reserve_rehash (5 samples, 0.47%)</title><rect x="94.0075%" y="389" width="0.4682%" height="15" fill="rgb(231,118,14)" fg:x="1004" fg:w="5"/><text x="94.2575%" y="399.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::reserve_rehash_inner (5 samples, 0.47%)</title><rect x="94.0075%" y="373" width="0.4682%" height="15" fill="rgb(238,83,0)" fg:x="1004" fg:w="5"/><text x="94.2575%" y="383.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::resize_inner (5 samples, 0.47%)</title><rect x="94.0075%" y="357" width="0.4682%" height="15" fill="rgb(221,39,39)" fg:x="1004" fg:w="5"/><text x="94.2575%" y="367.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::prepare_insert_slot (2 samples, 0.19%)</title><rect x="94.2884%" y="341" width="0.1873%" height="15" fill="rgb(222,119,46)" fg:x="1007" fg:w="2"/><text x="94.5384%" y="351.50"></text></g><g><title>hashbrown::raw::RawTableInner&lt;A&gt;::find_insert_slot (2 samples, 0.19%)</title><rect x="94.2884%" y="325" width="0.1873%" height="15" fill="rgb(222,165,49)" fg:x="1007" fg:w="2"/><text x="94.5384%" y="335.50"></text></g><g><title>hashbrown::raw::sse2::Group::load (1 samples, 0.09%)</title><rect x="94.3820%" y="309" width="0.0936%" height="15" fill="rgb(219,113,52)" fg:x="1008" fg:w="1"/><text x="94.6320%" y="319.50"></text></g><g><title>core::core_arch::x86::sse2::_mm_loadu_si128 (1 samples, 0.09%)</title><rect x="94.3820%" y="293" width="0.0936%" height="15" fill="rgb(214,7,15)" fg:x="1008" fg:w="1"/><text x="94.6320%" y="303.50"></text></g><g><title>core::intrinsics::copy_nonoverlapping (1 samples, 0.09%)</title><rect x="94.3820%" y="277" width="0.0936%" height="15" fill="rgb(235,32,4)" fg:x="1008" fg:w="1"/><text x="94.6320%" y="287.50"></text></g><g><title>super_word_counter::swc::reducer::launch_reducer_threads (14 samples, 1.31%)</title><rect x="93.7266%" y="469" width="1.3109%" height="15" fill="rgb(238,90,54)" fg:x="1001" fg:w="14"/><text x="93.9766%" y="479.50"></text></g><g><title>std::thread::JoinHandle&lt;T&gt;::join (6 samples, 0.56%)</title><rect x="94.4757%" y="453" width="0.5618%" height="15" fill="rgb(213,208,19)" fg:x="1009" fg:w="6"/><text x="94.7257%" y="463.50"></text></g><g><title>std::thread::JoinInner&lt;T&gt;::join (6 samples, 0.56%)</title><rect x="94.4757%" y="437" width="0.5618%" height="15" fill="rgb(233,156,4)" fg:x="1009" fg:w="6"/><text x="94.7257%" y="447.50"></text></g><g><title>std::sys::unix::thread::Thread::join (6 samples, 0.56%)</title><rect x="94.4757%" y="421" width="0.5618%" height="15" fill="rgb(207,194,5)" fg:x="1009" fg:w="6"/><text x="94.7257%" y="431.50"></text></g><g><title>[libc.so.6] (6 samples, 0.56%)</title><rect x="94.4757%" y="405" width="0.5618%" height="15" fill="rgb(206,111,30)" fg:x="1009" fg:w="6"/><text x="94.7257%" y="415.50"></text></g><g><title>[libc.so.6] (6 samples, 0.56%)</title><rect x="94.4757%" y="389" width="0.5618%" height="15" fill="rgb(243,70,54)" fg:x="1009" fg:w="6"/><text x="94.7257%" y="399.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (5 samples, 0.47%)</title><rect x="94.5693%" y="373" width="0.4682%" height="15" fill="rgb(242,28,8)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="383.50"></text></g><g><title>do_syscall_64 (5 samples, 0.47%)</title><rect x="94.5693%" y="357" width="0.4682%" height="15" fill="rgb(219,106,18)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="367.50"></text></g><g><title>__do_sys_futex (5 samples, 0.47%)</title><rect x="94.5693%" y="341" width="0.4682%" height="15" fill="rgb(244,222,10)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="351.50"></text></g><g><title>do_futex (5 samples, 0.47%)</title><rect x="94.5693%" y="325" width="0.4682%" height="15" fill="rgb(236,179,52)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="335.50"></text></g><g><title>futex_wait (5 samples, 0.47%)</title><rect x="94.5693%" y="309" width="0.4682%" height="15" fill="rgb(213,23,39)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="319.50"></text></g><g><title>futex_wait_queue_me (5 samples, 0.47%)</title><rect x="94.5693%" y="293" width="0.4682%" height="15" fill="rgb(238,48,10)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="303.50"></text></g><g><title>schedule (5 samples, 0.47%)</title><rect x="94.5693%" y="277" width="0.4682%" height="15" fill="rgb(251,196,23)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="287.50"></text></g><g><title>__schedule (5 samples, 0.47%)</title><rect x="94.5693%" y="261" width="0.4682%" height="15" fill="rgb(250,152,24)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="271.50"></text></g><g><title>finish_task_switch (5 samples, 0.47%)</title><rect x="94.5693%" y="245" width="0.4682%" height="15" fill="rgb(209,150,17)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="255.50"></text></g><g><title>__perf_event_task_sched_in (5 samples, 0.47%)</title><rect x="94.5693%" y="229" width="0.4682%" height="15" fill="rgb(234,202,34)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="239.50"></text></g><g><title>__intel_pmu_enable_all.constprop.0 (5 samples, 0.47%)</title><rect x="94.5693%" y="213" width="0.4682%" height="15" fill="rgb(253,148,53)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="223.50"></text></g><g><title>native_write_msr (5 samples, 0.47%)</title><rect x="94.5693%" y="197" width="0.4682%" height="15" fill="rgb(218,129,16)" fg:x="1010" fg:w="5"/><text x="94.8193%" y="207.50"></text></g><g><title>_start (28 samples, 2.62%)</title><rect x="92.9775%" y="757" width="2.6217%" height="15" fill="rgb(216,85,19)" fg:x="993" fg:w="28"/><text x="93.2275%" y="767.50">_s..</text></g><g><title>__libc_start_main (28 samples, 2.62%)</title><rect x="92.9775%" y="741" width="2.6217%" height="15" fill="rgb(235,228,7)" fg:x="993" fg:w="28"/><text x="93.2275%" y="751.50">__..</text></g><g><title>[libc.so.6] (28 samples, 2.62%)</title><rect x="92.9775%" y="725" width="2.6217%" height="15" fill="rgb(245,175,0)" fg:x="993" fg:w="28"/><text x="93.2275%" y="735.50">[l..</text></g><g><title>main (28 samples, 2.62%)</title><rect x="92.9775%" y="709" width="2.6217%" height="15" fill="rgb(208,168,36)" fg:x="993" fg:w="28"/><text x="93.2275%" y="719.50">ma..</text></g><g><title>std::rt::lang_start_internal (28 samples, 2.62%)</title><rect x="92.9775%" y="693" width="2.6217%" height="15" fill="rgb(246,171,24)" fg:x="993" fg:w="28"/><text x="93.2275%" y="703.50">st..</text></g><g><title>std::panic::catch_unwind (28 samples, 2.62%)</title><rect x="92.9775%" y="677" width="2.6217%" height="15" fill="rgb(215,142,24)" fg:x="993" fg:w="28"/><text x="93.2275%" y="687.50">st..</text></g><g><title>std::panicking::try (28 samples, 2.62%)</title><rect x="92.9775%" y="661" width="2.6217%" height="15" fill="rgb(250,187,7)" fg:x="993" fg:w="28"/><text x="93.2275%" y="671.50">st..</text></g><g><title>std::panicking::try::do_call (28 samples, 2.62%)</title><rect x="92.9775%" y="645" width="2.6217%" height="15" fill="rgb(228,66,33)" fg:x="993" fg:w="28"/><text x="93.2275%" y="655.50">st..</text></g><g><title>std::rt::lang_start_internal::{{closure}} (28 samples, 2.62%)</title><rect x="92.9775%" y="629" width="2.6217%" height="15" fill="rgb(234,215,21)" fg:x="993" fg:w="28"/><text x="93.2275%" y="639.50">st..</text></g><g><title>std::panic::catch_unwind (28 samples, 2.62%)</title><rect x="92.9775%" y="613" width="2.6217%" height="15" fill="rgb(222,191,20)" fg:x="993" fg:w="28"/><text x="93.2275%" y="623.50">st..</text></g><g><title>std::panicking::try (28 samples, 2.62%)</title><rect x="92.9775%" y="597" width="2.6217%" height="15" fill="rgb(245,79,54)" fg:x="993" fg:w="28"/><text x="93.2275%" y="607.50">st..</text></g><g><title>std::panicking::try::do_call (28 samples, 2.62%)</title><rect x="92.9775%" y="581" width="2.6217%" height="15" fill="rgb(240,10,37)" fg:x="993" fg:w="28"/><text x="93.2275%" y="591.50">st..</text></g><g><title>core::ops::function::impls::&lt;impl core::ops::function::FnOnce&lt;A&gt; for &amp;F&gt;::call_once (28 samples, 2.62%)</title><rect x="92.9775%" y="565" width="2.6217%" height="15" fill="rgb(214,192,32)" fg:x="993" fg:w="28"/><text x="93.2275%" y="575.50">co..</text></g><g><title>std::rt::lang_start::{{closure}} (28 samples, 2.62%)</title><rect x="92.9775%" y="549" width="2.6217%" height="15" fill="rgb(209,36,54)" fg:x="993" fg:w="28"/><text x="93.2275%" y="559.50">st..</text></g><g><title>std::sys_common::backtrace::__rust_begin_short_backtrace (28 samples, 2.62%)</title><rect x="92.9775%" y="533" width="2.6217%" height="15" fill="rgb(220,10,11)" fg:x="993" fg:w="28"/><text x="93.2275%" y="543.50">st..</text></g><g><title>core::ops::function::FnOnce::call_once (28 samples, 2.62%)</title><rect x="92.9775%" y="517" width="2.6217%" height="15" fill="rgb(221,106,17)" fg:x="993" fg:w="28"/><text x="93.2275%" y="527.50">co..</text></g><g><title>super_word_counter::main (28 samples, 2.62%)</title><rect x="92.9775%" y="501" width="2.6217%" height="15" fill="rgb(251,142,44)" fg:x="993" fg:w="28"/><text x="93.2275%" y="511.50">su..</text></g><g><title>super_word_counter::swc::launch_map_reduce (28 samples, 2.62%)</title><rect x="92.9775%" y="485" width="2.6217%" height="15" fill="rgb(238,13,15)" fg:x="993" fg:w="28"/><text x="93.2275%" y="495.50">su..</text></g><g><title>super_word_counter::swc::splitter::split_files_from_path (6 samples, 0.56%)</title><rect x="95.0375%" y="469" width="0.5618%" height="15" fill="rgb(208,107,27)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="479.50"></text></g><g><title>super_word_counter::swc::splitter::read_all_files (6 samples, 0.56%)</title><rect x="95.0375%" y="453" width="0.5618%" height="15" fill="rgb(205,136,37)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="463.50"></text></g><g><title>super_word_counter::swc::splitter::read_n_bytes (6 samples, 0.56%)</title><rect x="95.0375%" y="437" width="0.5618%" height="15" fill="rgb(250,205,27)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="447.50"></text></g><g><title>std::io::Read::read_to_end (6 samples, 0.56%)</title><rect x="95.0375%" y="421" width="0.5618%" height="15" fill="rgb(210,80,43)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="431.50"></text></g><g><title>std::io::default_read_to_end (6 samples, 0.56%)</title><rect x="95.0375%" y="405" width="0.5618%" height="15" fill="rgb(247,160,36)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="415.50"></text></g><g><title>&lt;std::io::Take&lt;T&gt; as std::io::Read&gt;::read_buf (6 samples, 0.56%)</title><rect x="95.0375%" y="389" width="0.5618%" height="15" fill="rgb(234,13,49)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="399.50"></text></g><g><title>std::io::impls::&lt;impl std::io::Read for &amp;mut R&gt;::read_buf (6 samples, 0.56%)</title><rect x="95.0375%" y="373" width="0.5618%" height="15" fill="rgb(234,122,0)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="383.50"></text></g><g><title>&lt;std::fs::File as std::io::Read&gt;::read_buf (6 samples, 0.56%)</title><rect x="95.0375%" y="357" width="0.5618%" height="15" fill="rgb(207,146,38)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="367.50"></text></g><g><title>std::sys::unix::fs::File::read_buf (6 samples, 0.56%)</title><rect x="95.0375%" y="341" width="0.5618%" height="15" fill="rgb(207,177,25)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="351.50"></text></g><g><title>std::sys::unix::fd::FileDesc::read_buf (6 samples, 0.56%)</title><rect x="95.0375%" y="325" width="0.5618%" height="15" fill="rgb(211,178,42)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="335.50"></text></g><g><title>read (6 samples, 0.56%)</title><rect x="95.0375%" y="309" width="0.5618%" height="15" fill="rgb(230,69,54)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="319.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (6 samples, 0.56%)</title><rect x="95.0375%" y="293" width="0.5618%" height="15" fill="rgb(214,135,41)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="303.50"></text></g><g><title>do_syscall_64 (6 samples, 0.56%)</title><rect x="95.0375%" y="277" width="0.5618%" height="15" fill="rgb(237,67,25)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="287.50"></text></g><g><title>ksys_read (6 samples, 0.56%)</title><rect x="95.0375%" y="261" width="0.5618%" height="15" fill="rgb(222,189,50)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="271.50"></text></g><g><title>vfs_read (6 samples, 0.56%)</title><rect x="95.0375%" y="245" width="0.5618%" height="15" fill="rgb(245,148,34)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="255.50"></text></g><g><title>new_sync_read (6 samples, 0.56%)</title><rect x="95.0375%" y="229" width="0.5618%" height="15" fill="rgb(222,29,6)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="239.50"></text></g><g><title>generic_file_buffered_read (6 samples, 0.56%)</title><rect x="95.0375%" y="213" width="0.5618%" height="15" fill="rgb(221,189,43)" fg:x="1015" fg:w="6"/><text x="95.2875%" y="223.50"></text></g><g><title>copy_page_to_iter (5 samples, 0.47%)</title><rect x="95.1311%" y="197" width="0.4682%" height="15" fill="rgb(207,36,27)" fg:x="1016" fg:w="5"/><text x="95.3811%" y="207.50"></text></g><g><title>copyout (5 samples, 0.47%)</title><rect x="95.1311%" y="181" width="0.4682%" height="15" fill="rgb(217,90,24)" fg:x="1016" fg:w="5"/><text x="95.3811%" y="191.50"></text></g><g><title>copy_user_enhanced_fast_string (5 samples, 0.47%)</title><rect x="95.1311%" y="165" width="0.4682%" height="15" fill="rgb(224,66,35)" fg:x="1016" fg:w="5"/><text x="95.3811%" y="175.50"></text></g><g><title>asm_exc_page_fault (2 samples, 0.19%)</title><rect x="95.4120%" y="149" width="0.1873%" height="15" fill="rgb(221,13,50)" fg:x="1019" fg:w="2"/><text x="95.6620%" y="159.50"></text></g><g><title>exc_page_fault (1 samples, 0.09%)</title><rect x="95.5056%" y="133" width="0.0936%" height="15" fill="rgb(236,68,49)" fg:x="1020" fg:w="1"/><text x="95.7556%" y="143.50"></text></g><g><title>do_user_addr_fault (1 samples, 0.09%)</title><rect x="95.5056%" y="117" width="0.0936%" height="15" fill="rgb(229,146,28)" fg:x="1020" fg:w="1"/><text x="95.7556%" y="127.50"></text></g><g><title>handle_mm_fault (1 samples, 0.09%)</title><rect x="95.5056%" y="101" width="0.0936%" height="15" fill="rgb(225,31,38)" fg:x="1020" fg:w="1"/><text x="95.7556%" y="111.50"></text></g><g><title>alloc_pages_vma (1 samples, 0.09%)</title><rect x="95.5056%" y="85" width="0.0936%" height="15" fill="rgb(250,208,3)" fg:x="1020" fg:w="1"/><text x="95.7556%" y="95.50"></text></g><g><title>__alloc_pages_nodemask (1 samples, 0.09%)</title><rect x="95.5056%" y="69" width="0.0936%" height="15" fill="rgb(246,54,23)" fg:x="1020" fg:w="1"/><text x="95.7556%" y="79.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.09%)</title><rect x="95.5056%" y="53" width="0.0936%" height="15" fill="rgb(243,76,11)" fg:x="1020" fg:w="1"/><text x="95.7556%" y="63.50"></text></g><g><title>__list_del_entry_valid (1 samples, 0.09%)</title><rect x="95.5056%" y="37" width="0.0936%" height="15" fill="rgb(245,21,50)" fg:x="1020" fg:w="1"/><text x="95.7556%" y="47.50"></text></g><g><title>__count_memcg_events.part.0 (1 samples, 0.09%)</title><rect x="95.8801%" y="693" width="0.0936%" height="15" fill="rgb(228,9,43)" fg:x="1024" fg:w="1"/><text x="96.1301%" y="703.50"></text></g><g><title>asm_exc_page_fault (6 samples, 0.56%)</title><rect x="95.5993%" y="757" width="0.5618%" height="15" fill="rgb(208,100,47)" fg:x="1021" fg:w="6"/><text x="95.8493%" y="767.50"></text></g><g><title>exc_page_fault (5 samples, 0.47%)</title><rect x="95.6929%" y="741" width="0.4682%" height="15" fill="rgb(232,26,8)" fg:x="1022" fg:w="5"/><text x="95.9429%" y="751.50"></text></g><g><title>do_user_addr_fault (5 samples, 0.47%)</title><rect x="95.6929%" y="725" width="0.4682%" height="15" fill="rgb(216,166,38)" fg:x="1022" fg:w="5"/><text x="95.9429%" y="735.50"></text></g><g><title>handle_mm_fault (5 samples, 0.47%)</title><rect x="95.6929%" y="709" width="0.4682%" height="15" fill="rgb(251,202,51)" fg:x="1022" fg:w="5"/><text x="95.9429%" y="719.50"></text></g><g><title>alloc_pages_vma (2 samples, 0.19%)</title><rect x="95.9738%" y="693" width="0.1873%" height="15" fill="rgb(254,216,34)" fg:x="1025" fg:w="2"/><text x="96.2238%" y="703.50"></text></g><g><title>__alloc_pages_nodemask (2 samples, 0.19%)</title><rect x="95.9738%" y="677" width="0.1873%" height="15" fill="rgb(251,32,27)" fg:x="1025" fg:w="2"/><text x="96.2238%" y="687.50"></text></g><g><title>get_page_from_freelist (1 samples, 0.09%)</title><rect x="96.0674%" y="661" width="0.0936%" height="15" fill="rgb(208,127,28)" fg:x="1026" fg:w="1"/><text x="96.3174%" y="671.50"></text></g><g><title>tlb_finish_mmu (1 samples, 0.09%)</title><rect x="96.1610%" y="645" width="0.0936%" height="15" fill="rgb(224,137,22)" fg:x="1027" fg:w="1"/><text x="96.4110%" y="655.50"></text></g><g><title>release_pages (1 samples, 0.09%)</title><rect x="96.1610%" y="629" width="0.0936%" height="15" fill="rgb(254,70,32)" fg:x="1027" fg:w="1"/><text x="96.4110%" y="639.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.09%)</title><rect x="96.1610%" y="613" width="0.0936%" height="15" fill="rgb(229,75,37)" fg:x="1027" fg:w="1"/><text x="96.4110%" y="623.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.09%)</title><rect x="96.1610%" y="597" width="0.0936%" height="15" fill="rgb(252,64,23)" fg:x="1027" fg:w="1"/><text x="96.4110%" y="607.50"></text></g><g><title>[vmlinux] (2 samples, 0.19%)</title><rect x="96.1610%" y="725" width="0.1873%" height="15" fill="rgb(232,162,48)" fg:x="1027" fg:w="2"/><text x="96.4110%" y="735.50"></text></g><g><title>do_group_exit (2 samples, 0.19%)</title><rect x="96.1610%" y="709" width="0.1873%" height="15" fill="rgb(246,160,12)" fg:x="1027" fg:w="2"/><text x="96.4110%" y="719.50"></text></g><g><title>do_exit (2 samples, 0.19%)</title><rect x="96.1610%" y="693" width="0.1873%" height="15" fill="rgb(247,166,0)" fg:x="1027" fg:w="2"/><text x="96.4110%" y="703.50"></text></g><g><title>mmput (2 samples, 0.19%)</title><rect x="96.1610%" y="677" width="0.1873%" height="15" fill="rgb(249,219,21)" fg:x="1027" fg:w="2"/><text x="96.4110%" y="687.50"></text></g><g><title>exit_mmap (2 samples, 0.19%)</title><rect x="96.1610%" y="661" width="0.1873%" height="15" fill="rgb(205,209,3)" fg:x="1027" fg:w="2"/><text x="96.4110%" y="671.50"></text></g><g><title>unmap_vmas (1 samples, 0.09%)</title><rect x="96.2547%" y="645" width="0.0936%" height="15" fill="rgb(243,44,1)" fg:x="1028" fg:w="1"/><text x="96.5047%" y="655.50"></text></g><g><title>unmap_page_range (1 samples, 0.09%)</title><rect x="96.2547%" y="629" width="0.0936%" height="15" fill="rgb(206,159,16)" fg:x="1028" fg:w="1"/><text x="96.5047%" y="639.50"></text></g><g><title>page_remove_rmap (1 samples, 0.09%)</title><rect x="96.2547%" y="613" width="0.0936%" height="15" fill="rgb(244,77,30)" fg:x="1028" fg:w="1"/><text x="96.5047%" y="623.50"></text></g><g><title>__mod_lruvec_state (1 samples, 0.09%)</title><rect x="96.2547%" y="597" width="0.0936%" height="15" fill="rgb(218,69,12)" fg:x="1028" fg:w="1"/><text x="96.5047%" y="607.50"></text></g><g><title>__mod_node_page_state (1 samples, 0.09%)</title><rect x="96.2547%" y="581" width="0.0936%" height="15" fill="rgb(212,87,7)" fg:x="1028" fg:w="1"/><text x="96.5047%" y="591.50"></text></g><g><title>entry_SYSCALL_64_after_hwframe (3 samples, 0.28%)</title><rect x="96.1610%" y="757" width="0.2809%" height="15" fill="rgb(245,114,25)" fg:x="1027" fg:w="3"/><text x="96.4110%" y="767.50"></text></g><g><title>do_syscall_64 (3 samples, 0.28%)</title><rect x="96.1610%" y="741" width="0.2809%" height="15" fill="rgb(210,61,42)" fg:x="1027" fg:w="3"/><text x="96.4110%" y="751.50"></text></g><g><title>__x64_sys_execve (1 samples, 0.09%)</title><rect x="96.3483%" y="725" width="0.0936%" height="15" fill="rgb(211,52,33)" fg:x="1029" fg:w="1"/><text x="96.5983%" y="735.50"></text></g><g><title>do_execveat_common.isra.0 (1 samples, 0.09%)</title><rect x="96.3483%" y="709" width="0.0936%" height="15" fill="rgb(234,58,33)" fg:x="1029" fg:w="1"/><text x="96.5983%" y="719.50"></text></g><g><title>bprm_execve (1 samples, 0.09%)</title><rect x="96.3483%" y="693" width="0.0936%" height="15" fill="rgb(220,115,36)" fg:x="1029" fg:w="1"/><text x="96.5983%" y="703.50"></text></g><g><title>load_elf_binary (1 samples, 0.09%)</title><rect x="96.3483%" y="677" width="0.0936%" height="15" fill="rgb(243,153,54)" fg:x="1029" fg:w="1"/><text x="96.5983%" y="687.50"></text></g><g><title>setup_arg_pages (1 samples, 0.09%)</title><rect x="96.3483%" y="661" width="0.0936%" height="15" fill="rgb(251,47,18)" fg:x="1029" fg:w="1"/><text x="96.5983%" y="671.50"></text></g><g><title>mprotect_fixup (1 samples, 0.09%)</title><rect x="96.3483%" y="645" width="0.0936%" height="15" fill="rgb(242,102,42)" fg:x="1029" fg:w="1"/><text x="96.5983%" y="655.50"></text></g><g><title>change_protection (1 samples, 0.09%)</title><rect x="96.3483%" y="629" width="0.0936%" height="15" fill="rgb(234,31,38)" fg:x="1029" fg:w="1"/><text x="96.5983%" y="639.50"></text></g><g><title>flush_tlb_mm_range (1 samples, 0.09%)</title><rect x="96.3483%" y="613" width="0.0936%" height="15" fill="rgb(221,117,51)" fg:x="1029" fg:w="1"/><text x="96.5983%" y="623.50"></text></g><g><title>__perf_event_task_sched_in (37 samples, 3.46%)</title><rect x="96.4419%" y="709" width="3.4644%" height="15" fill="rgb(212,20,18)" fg:x="1030" fg:w="37"/><text x="96.6919%" y="719.50">__p..</text></g><g><title>__intel_pmu_enable_all.constprop.0 (37 samples, 3.46%)</title><rect x="96.4419%" y="693" width="3.4644%" height="15" fill="rgb(245,133,36)" fg:x="1030" fg:w="37"/><text x="96.6919%" y="703.50">__i..</text></g><g><title>native_write_msr (37 samples, 3.46%)</title><rect x="96.4419%" y="677" width="3.4644%" height="15" fill="rgb(212,6,19)" fg:x="1030" fg:w="37"/><text x="96.6919%" y="687.50">nat..</text></g><g><title>all (1,068 samples, 100%)</title><rect x="0.0000%" y="789" width="100.0000%" height="15" fill="rgb(218,1,36)" fg:x="0" fg:w="1068"/><text x="0.2500%" y="799.50"></text></g><g><title>super_word_coun (1,063 samples, 99.53%)</title><rect x="0.4682%" y="773" width="99.5318%" height="15" fill="rgb(246,84,54)" fg:x="5" fg:w="1063"/><text x="0.7182%" y="783.50">super_word_coun</text></g><g><title>ret_from_fork (38 samples, 3.56%)</title><rect x="96.4419%" y="757" width="3.5581%" height="15" fill="rgb(242,110,6)" fg:x="1030" fg:w="38"/><text x="96.6919%" y="767.50">ret_..</text></g><g><title>schedule_tail (38 samples, 3.56%)</title><rect x="96.4419%" y="741" width="3.5581%" height="15" fill="rgb(214,47,5)" fg:x="1030" fg:w="38"/><text x="96.6919%" y="751.50">sche..</text></g><g><title>finish_task_switch (38 samples, 3.56%)</title><rect x="96.4419%" y="725" width="3.5581%" height="15" fill="rgb(218,159,25)" fg:x="1030" fg:w="38"/><text x="96.6919%" y="735.50">fini..</text></g><g><title>_raw_spin_unlock_irq (1 samples, 0.09%)</title><rect x="99.9064%" y="709" width="0.0936%" height="15" fill="rgb(215,211,28)" fg:x="1067" fg:w="1"/><text x="100.1564%" y="719.50"></text></g><g><title>asm_sysvec_apic_timer_interrupt (1 samples, 0.09%)</title><rect x="99.9064%" y="693" width="0.0936%" height="15" fill="rgb(238,59,32)" fg:x="1067" fg:w="1"/><text x="100.1564%" y="703.50"></text></g><g><title>sysvec_apic_timer_interrupt (1 samples, 0.09%)</title><rect x="99.9064%" y="677" width="0.0936%" height="15" fill="rgb(226,82,3)" fg:x="1067" fg:w="1"/><text x="100.1564%" y="687.50"></text></g><g><title>irq_exit_rcu (1 samples, 0.09%)</title><rect x="99.9064%" y="661" width="0.0936%" height="15" fill="rgb(240,164,32)" fg:x="1067" fg:w="1"/><text x="100.1564%" y="671.50"></text></g><g><title>do_softirq_own_stack (1 samples, 0.09%)</title><rect x="99.9064%" y="645" width="0.0936%" height="15" fill="rgb(232,46,7)" fg:x="1067" fg:w="1"/><text x="100.1564%" y="655.50"></text></g><g><title>asm_call_irq_on_stack (1 samples, 0.09%)</title><rect x="99.9064%" y="629" width="0.0936%" height="15" fill="rgb(229,129,53)" fg:x="1067" fg:w="1"/><text x="100.1564%" y="639.50"></text></g><g><title>__do_softirq (1 samples, 0.09%)</title><rect x="99.9064%" y="613" width="0.0936%" height="15" fill="rgb(234,188,29)" fg:x="1067" fg:w="1"/><text x="100.1564%" y="623.50"></text></g><g><title>rcu_core (1 samples, 0.09%)</title><rect x="99.9064%" y="597" width="0.0936%" height="15" fill="rgb(246,141,4)" fg:x="1067" fg:w="1"/><text x="100.1564%" y="607.50"></text></g></svg></svg>